// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client"
  output        = "../app/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  games         UserGame[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model IGDBAuth {
  id           Int       @id @default(autoincrement())
  access_token String?
  expires      DateTime?
  updatedAt    DateTime
}

model UserGame {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  status      Status     @relation(fields: [statusId], references: [id])
  statusId    Int
  notes       String?
  releaseDate DateTime?
  startDate   DateTime?
  finishDate  DateTime?
  platform    Platform?  @relation(fields: [platformId], references: [id], name: "playedPlatform")
  platformId  Int?
  platforms   Platform[] @relation(name: "allPlatforms")
  genres      Genre[]
  igdbID      Int
  
}

model Status {
  id          Int        @id @default(autoincrement())
  games       UserGame[]
  statusTitle String
  isDefault   Boolean
  group       StatusGroup
}

model Genre {
  id       Int        @id @default(autoincrement())
  name     String
  igdbId   Int        @unique
  igdbGame UserGame[]
  checksum String     @default("-")
}

model Platform {
  id                  Int        @id @default(autoincrement())
  name                String
  igdbId              Int        @unique
  userGames           UserGame[] @relation(name: "playedPlatform")
  userGamesAllPatfors UserGame[] @relation(name: "allPlatforms")
  checksum            String     @default("-")
}

model System {
  id      Int    @id @default(autoincrement())
  message String
}

enum StatusGroup {
  PLAYING
  BACKLOG
  FINISHED
  PLANNED
  DROPPED
}