
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IGDBGame` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IGDBGame
 * 
 */
export type IGDBGameModel = runtime.Types.Result.DefaultSelection<Prisma.$IGDBGamePayload>

export type AggregateIGDBGame = {
  _count: IGDBGameCountAggregateOutputType | null
  _avg: IGDBGameAvgAggregateOutputType | null
  _sum: IGDBGameSumAggregateOutputType | null
  _min: IGDBGameMinAggregateOutputType | null
  _max: IGDBGameMaxAggregateOutputType | null
}

export type IGDBGameAvgAggregateOutputType = {
  id: number | null
  igdbId: number | null
}

export type IGDBGameSumAggregateOutputType = {
  id: number | null
  igdbId: number | null
}

export type IGDBGameMinAggregateOutputType = {
  id: number | null
  igdbId: number | null
  name: string | null
  first_release_date: Date | null
  coverUrl: string | null
  checksum: string | null
}

export type IGDBGameMaxAggregateOutputType = {
  id: number | null
  igdbId: number | null
  name: string | null
  first_release_date: Date | null
  coverUrl: string | null
  checksum: string | null
}

export type IGDBGameCountAggregateOutputType = {
  id: number
  igdbId: number
  name: number
  first_release_date: number
  coverUrl: number
  checksum: number
  _all: number
}


export type IGDBGameAvgAggregateInputType = {
  id?: true
  igdbId?: true
}

export type IGDBGameSumAggregateInputType = {
  id?: true
  igdbId?: true
}

export type IGDBGameMinAggregateInputType = {
  id?: true
  igdbId?: true
  name?: true
  first_release_date?: true
  coverUrl?: true
  checksum?: true
}

export type IGDBGameMaxAggregateInputType = {
  id?: true
  igdbId?: true
  name?: true
  first_release_date?: true
  coverUrl?: true
  checksum?: true
}

export type IGDBGameCountAggregateInputType = {
  id?: true
  igdbId?: true
  name?: true
  first_release_date?: true
  coverUrl?: true
  checksum?: true
  _all?: true
}

export type IGDBGameAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IGDBGame to aggregate.
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBGames to fetch.
   */
  orderBy?: Prisma.IGDBGameOrderByWithRelationInput | Prisma.IGDBGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IGDBGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IGDBGames
  **/
  _count?: true | IGDBGameCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IGDBGameAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IGDBGameSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IGDBGameMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IGDBGameMaxAggregateInputType
}

export type GetIGDBGameAggregateType<T extends IGDBGameAggregateArgs> = {
      [P in keyof T & keyof AggregateIGDBGame]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIGDBGame[P]>
    : Prisma.GetScalarType<T[P], AggregateIGDBGame[P]>
}




export type IGDBGameGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IGDBGameWhereInput
  orderBy?: Prisma.IGDBGameOrderByWithAggregationInput | Prisma.IGDBGameOrderByWithAggregationInput[]
  by: Prisma.IGDBGameScalarFieldEnum[] | Prisma.IGDBGameScalarFieldEnum
  having?: Prisma.IGDBGameScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IGDBGameCountAggregateInputType | true
  _avg?: IGDBGameAvgAggregateInputType
  _sum?: IGDBGameSumAggregateInputType
  _min?: IGDBGameMinAggregateInputType
  _max?: IGDBGameMaxAggregateInputType
}

export type IGDBGameGroupByOutputType = {
  id: number
  igdbId: number
  name: string
  first_release_date: Date | null
  coverUrl: string | null
  checksum: string
  _count: IGDBGameCountAggregateOutputType | null
  _avg: IGDBGameAvgAggregateOutputType | null
  _sum: IGDBGameSumAggregateOutputType | null
  _min: IGDBGameMinAggregateOutputType | null
  _max: IGDBGameMaxAggregateOutputType | null
}

type GetIGDBGameGroupByPayload<T extends IGDBGameGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IGDBGameGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IGDBGameGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IGDBGameGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IGDBGameGroupByOutputType[P]>
      }
    >
  > 



export type IGDBGameWhereInput = {
  AND?: Prisma.IGDBGameWhereInput | Prisma.IGDBGameWhereInput[]
  OR?: Prisma.IGDBGameWhereInput[]
  NOT?: Prisma.IGDBGameWhereInput | Prisma.IGDBGameWhereInput[]
  id?: Prisma.IntFilter<"IGDBGame"> | number
  igdbId?: Prisma.IntFilter<"IGDBGame"> | number
  name?: Prisma.StringFilter<"IGDBGame"> | string
  first_release_date?: Prisma.DateTimeNullableFilter<"IGDBGame"> | Date | string | null
  coverUrl?: Prisma.StringNullableFilter<"IGDBGame"> | string | null
  checksum?: Prisma.StringFilter<"IGDBGame"> | string
  userGame?: Prisma.UserGameListRelationFilter
  genres?: Prisma.GenreListRelationFilter
  platforms?: Prisma.PlatformListRelationFilter
}

export type IGDBGameOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  first_release_date?: Prisma.SortOrderInput | Prisma.SortOrder
  coverUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  checksum?: Prisma.SortOrder
  userGame?: Prisma.UserGameOrderByRelationAggregateInput
  genres?: Prisma.GenreOrderByRelationAggregateInput
  platforms?: Prisma.PlatformOrderByRelationAggregateInput
}

export type IGDBGameWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  igdbId?: number
  AND?: Prisma.IGDBGameWhereInput | Prisma.IGDBGameWhereInput[]
  OR?: Prisma.IGDBGameWhereInput[]
  NOT?: Prisma.IGDBGameWhereInput | Prisma.IGDBGameWhereInput[]
  name?: Prisma.StringFilter<"IGDBGame"> | string
  first_release_date?: Prisma.DateTimeNullableFilter<"IGDBGame"> | Date | string | null
  coverUrl?: Prisma.StringNullableFilter<"IGDBGame"> | string | null
  checksum?: Prisma.StringFilter<"IGDBGame"> | string
  userGame?: Prisma.UserGameListRelationFilter
  genres?: Prisma.GenreListRelationFilter
  platforms?: Prisma.PlatformListRelationFilter
}, "id" | "igdbId">

export type IGDBGameOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  first_release_date?: Prisma.SortOrderInput | Prisma.SortOrder
  coverUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  checksum?: Prisma.SortOrder
  _count?: Prisma.IGDBGameCountOrderByAggregateInput
  _avg?: Prisma.IGDBGameAvgOrderByAggregateInput
  _max?: Prisma.IGDBGameMaxOrderByAggregateInput
  _min?: Prisma.IGDBGameMinOrderByAggregateInput
  _sum?: Prisma.IGDBGameSumOrderByAggregateInput
}

export type IGDBGameScalarWhereWithAggregatesInput = {
  AND?: Prisma.IGDBGameScalarWhereWithAggregatesInput | Prisma.IGDBGameScalarWhereWithAggregatesInput[]
  OR?: Prisma.IGDBGameScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IGDBGameScalarWhereWithAggregatesInput | Prisma.IGDBGameScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"IGDBGame"> | number
  igdbId?: Prisma.IntWithAggregatesFilter<"IGDBGame"> | number
  name?: Prisma.StringWithAggregatesFilter<"IGDBGame"> | string
  first_release_date?: Prisma.DateTimeNullableWithAggregatesFilter<"IGDBGame"> | Date | string | null
  coverUrl?: Prisma.StringNullableWithAggregatesFilter<"IGDBGame"> | string | null
  checksum?: Prisma.StringWithAggregatesFilter<"IGDBGame"> | string
}

export type IGDBGameCreateInput = {
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  userGame?: Prisma.UserGameCreateNestedManyWithoutGameInput
  genres?: Prisma.GenreCreateNestedManyWithoutIgdbGameInput
  platforms?: Prisma.PlatformCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameUncheckedCreateInput = {
  id?: number
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  userGame?: Prisma.UserGameUncheckedCreateNestedManyWithoutGameInput
  genres?: Prisma.GenreUncheckedCreateNestedManyWithoutIgdbGameInput
  platforms?: Prisma.PlatformUncheckedCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameUpdateInput = {
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  userGame?: Prisma.UserGameUpdateManyWithoutGameNestedInput
  genres?: Prisma.GenreUpdateManyWithoutIgdbGameNestedInput
  platforms?: Prisma.PlatformUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  userGame?: Prisma.UserGameUncheckedUpdateManyWithoutGameNestedInput
  genres?: Prisma.GenreUncheckedUpdateManyWithoutIgdbGameNestedInput
  platforms?: Prisma.PlatformUncheckedUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameCreateManyInput = {
  id?: number
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
}

export type IGDBGameUpdateManyMutationInput = {
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IGDBGameUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IGDBGameCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  first_release_date?: Prisma.SortOrder
  coverUrl?: Prisma.SortOrder
  checksum?: Prisma.SortOrder
}

export type IGDBGameAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
}

export type IGDBGameMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  first_release_date?: Prisma.SortOrder
  coverUrl?: Prisma.SortOrder
  checksum?: Prisma.SortOrder
}

export type IGDBGameMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  first_release_date?: Prisma.SortOrder
  coverUrl?: Prisma.SortOrder
  checksum?: Prisma.SortOrder
}

export type IGDBGameSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  igdbId?: Prisma.SortOrder
}

export type IGDBGameScalarRelationFilter = {
  is?: Prisma.IGDBGameWhereInput
  isNot?: Prisma.IGDBGameWhereInput
}

export type IGDBGameListRelationFilter = {
  every?: Prisma.IGDBGameWhereInput
  some?: Prisma.IGDBGameWhereInput
  none?: Prisma.IGDBGameWhereInput
}

export type IGDBGameOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IGDBGameCreateNestedOneWithoutUserGameInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutUserGameInput, Prisma.IGDBGameUncheckedCreateWithoutUserGameInput>
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutUserGameInput
  connect?: Prisma.IGDBGameWhereUniqueInput
}

export type IGDBGameUpdateOneRequiredWithoutUserGameNestedInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutUserGameInput, Prisma.IGDBGameUncheckedCreateWithoutUserGameInput>
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutUserGameInput
  upsert?: Prisma.IGDBGameUpsertWithoutUserGameInput
  connect?: Prisma.IGDBGameWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IGDBGameUpdateToOneWithWhereWithoutUserGameInput, Prisma.IGDBGameUpdateWithoutUserGameInput>, Prisma.IGDBGameUncheckedUpdateWithoutUserGameInput>
}

export type IGDBGameCreateNestedManyWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutGenresInput, Prisma.IGDBGameUncheckedCreateWithoutGenresInput> | Prisma.IGDBGameCreateWithoutGenresInput[] | Prisma.IGDBGameUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutGenresInput | Prisma.IGDBGameCreateOrConnectWithoutGenresInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
}

export type IGDBGameUncheckedCreateNestedManyWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutGenresInput, Prisma.IGDBGameUncheckedCreateWithoutGenresInput> | Prisma.IGDBGameCreateWithoutGenresInput[] | Prisma.IGDBGameUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutGenresInput | Prisma.IGDBGameCreateOrConnectWithoutGenresInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
}

export type IGDBGameUpdateManyWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutGenresInput, Prisma.IGDBGameUncheckedCreateWithoutGenresInput> | Prisma.IGDBGameCreateWithoutGenresInput[] | Prisma.IGDBGameUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutGenresInput | Prisma.IGDBGameCreateOrConnectWithoutGenresInput[]
  upsert?: Prisma.IGDBGameUpsertWithWhereUniqueWithoutGenresInput | Prisma.IGDBGameUpsertWithWhereUniqueWithoutGenresInput[]
  set?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  disconnect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  delete?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  update?: Prisma.IGDBGameUpdateWithWhereUniqueWithoutGenresInput | Prisma.IGDBGameUpdateWithWhereUniqueWithoutGenresInput[]
  updateMany?: Prisma.IGDBGameUpdateManyWithWhereWithoutGenresInput | Prisma.IGDBGameUpdateManyWithWhereWithoutGenresInput[]
  deleteMany?: Prisma.IGDBGameScalarWhereInput | Prisma.IGDBGameScalarWhereInput[]
}

export type IGDBGameUncheckedUpdateManyWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutGenresInput, Prisma.IGDBGameUncheckedCreateWithoutGenresInput> | Prisma.IGDBGameCreateWithoutGenresInput[] | Prisma.IGDBGameUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutGenresInput | Prisma.IGDBGameCreateOrConnectWithoutGenresInput[]
  upsert?: Prisma.IGDBGameUpsertWithWhereUniqueWithoutGenresInput | Prisma.IGDBGameUpsertWithWhereUniqueWithoutGenresInput[]
  set?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  disconnect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  delete?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  update?: Prisma.IGDBGameUpdateWithWhereUniqueWithoutGenresInput | Prisma.IGDBGameUpdateWithWhereUniqueWithoutGenresInput[]
  updateMany?: Prisma.IGDBGameUpdateManyWithWhereWithoutGenresInput | Prisma.IGDBGameUpdateManyWithWhereWithoutGenresInput[]
  deleteMany?: Prisma.IGDBGameScalarWhereInput | Prisma.IGDBGameScalarWhereInput[]
}

export type IGDBGameCreateNestedManyWithoutPlatformsInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutPlatformsInput, Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput> | Prisma.IGDBGameCreateWithoutPlatformsInput[] | Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput | Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
}

export type IGDBGameUncheckedCreateNestedManyWithoutPlatformsInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutPlatformsInput, Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput> | Prisma.IGDBGameCreateWithoutPlatformsInput[] | Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput | Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
}

export type IGDBGameUpdateManyWithoutPlatformsNestedInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutPlatformsInput, Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput> | Prisma.IGDBGameCreateWithoutPlatformsInput[] | Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput | Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput[]
  upsert?: Prisma.IGDBGameUpsertWithWhereUniqueWithoutPlatformsInput | Prisma.IGDBGameUpsertWithWhereUniqueWithoutPlatformsInput[]
  set?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  disconnect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  delete?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  update?: Prisma.IGDBGameUpdateWithWhereUniqueWithoutPlatformsInput | Prisma.IGDBGameUpdateWithWhereUniqueWithoutPlatformsInput[]
  updateMany?: Prisma.IGDBGameUpdateManyWithWhereWithoutPlatformsInput | Prisma.IGDBGameUpdateManyWithWhereWithoutPlatformsInput[]
  deleteMany?: Prisma.IGDBGameScalarWhereInput | Prisma.IGDBGameScalarWhereInput[]
}

export type IGDBGameUncheckedUpdateManyWithoutPlatformsNestedInput = {
  create?: Prisma.XOR<Prisma.IGDBGameCreateWithoutPlatformsInput, Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput> | Prisma.IGDBGameCreateWithoutPlatformsInput[] | Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput[]
  connectOrCreate?: Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput | Prisma.IGDBGameCreateOrConnectWithoutPlatformsInput[]
  upsert?: Prisma.IGDBGameUpsertWithWhereUniqueWithoutPlatformsInput | Prisma.IGDBGameUpsertWithWhereUniqueWithoutPlatformsInput[]
  set?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  disconnect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  delete?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  connect?: Prisma.IGDBGameWhereUniqueInput | Prisma.IGDBGameWhereUniqueInput[]
  update?: Prisma.IGDBGameUpdateWithWhereUniqueWithoutPlatformsInput | Prisma.IGDBGameUpdateWithWhereUniqueWithoutPlatformsInput[]
  updateMany?: Prisma.IGDBGameUpdateManyWithWhereWithoutPlatformsInput | Prisma.IGDBGameUpdateManyWithWhereWithoutPlatformsInput[]
  deleteMany?: Prisma.IGDBGameScalarWhereInput | Prisma.IGDBGameScalarWhereInput[]
}

export type IGDBGameCreateWithoutUserGameInput = {
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  genres?: Prisma.GenreCreateNestedManyWithoutIgdbGameInput
  platforms?: Prisma.PlatformCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameUncheckedCreateWithoutUserGameInput = {
  id?: number
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  genres?: Prisma.GenreUncheckedCreateNestedManyWithoutIgdbGameInput
  platforms?: Prisma.PlatformUncheckedCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameCreateOrConnectWithoutUserGameInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  create: Prisma.XOR<Prisma.IGDBGameCreateWithoutUserGameInput, Prisma.IGDBGameUncheckedCreateWithoutUserGameInput>
}

export type IGDBGameUpsertWithoutUserGameInput = {
  update: Prisma.XOR<Prisma.IGDBGameUpdateWithoutUserGameInput, Prisma.IGDBGameUncheckedUpdateWithoutUserGameInput>
  create: Prisma.XOR<Prisma.IGDBGameCreateWithoutUserGameInput, Prisma.IGDBGameUncheckedCreateWithoutUserGameInput>
  where?: Prisma.IGDBGameWhereInput
}

export type IGDBGameUpdateToOneWithWhereWithoutUserGameInput = {
  where?: Prisma.IGDBGameWhereInput
  data: Prisma.XOR<Prisma.IGDBGameUpdateWithoutUserGameInput, Prisma.IGDBGameUncheckedUpdateWithoutUserGameInput>
}

export type IGDBGameUpdateWithoutUserGameInput = {
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  genres?: Prisma.GenreUpdateManyWithoutIgdbGameNestedInput
  platforms?: Prisma.PlatformUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameUncheckedUpdateWithoutUserGameInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  genres?: Prisma.GenreUncheckedUpdateManyWithoutIgdbGameNestedInput
  platforms?: Prisma.PlatformUncheckedUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameCreateWithoutGenresInput = {
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  userGame?: Prisma.UserGameCreateNestedManyWithoutGameInput
  platforms?: Prisma.PlatformCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameUncheckedCreateWithoutGenresInput = {
  id?: number
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  userGame?: Prisma.UserGameUncheckedCreateNestedManyWithoutGameInput
  platforms?: Prisma.PlatformUncheckedCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameCreateOrConnectWithoutGenresInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  create: Prisma.XOR<Prisma.IGDBGameCreateWithoutGenresInput, Prisma.IGDBGameUncheckedCreateWithoutGenresInput>
}

export type IGDBGameUpsertWithWhereUniqueWithoutGenresInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  update: Prisma.XOR<Prisma.IGDBGameUpdateWithoutGenresInput, Prisma.IGDBGameUncheckedUpdateWithoutGenresInput>
  create: Prisma.XOR<Prisma.IGDBGameCreateWithoutGenresInput, Prisma.IGDBGameUncheckedCreateWithoutGenresInput>
}

export type IGDBGameUpdateWithWhereUniqueWithoutGenresInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  data: Prisma.XOR<Prisma.IGDBGameUpdateWithoutGenresInput, Prisma.IGDBGameUncheckedUpdateWithoutGenresInput>
}

export type IGDBGameUpdateManyWithWhereWithoutGenresInput = {
  where: Prisma.IGDBGameScalarWhereInput
  data: Prisma.XOR<Prisma.IGDBGameUpdateManyMutationInput, Prisma.IGDBGameUncheckedUpdateManyWithoutGenresInput>
}

export type IGDBGameScalarWhereInput = {
  AND?: Prisma.IGDBGameScalarWhereInput | Prisma.IGDBGameScalarWhereInput[]
  OR?: Prisma.IGDBGameScalarWhereInput[]
  NOT?: Prisma.IGDBGameScalarWhereInput | Prisma.IGDBGameScalarWhereInput[]
  id?: Prisma.IntFilter<"IGDBGame"> | number
  igdbId?: Prisma.IntFilter<"IGDBGame"> | number
  name?: Prisma.StringFilter<"IGDBGame"> | string
  first_release_date?: Prisma.DateTimeNullableFilter<"IGDBGame"> | Date | string | null
  coverUrl?: Prisma.StringNullableFilter<"IGDBGame"> | string | null
  checksum?: Prisma.StringFilter<"IGDBGame"> | string
}

export type IGDBGameCreateWithoutPlatformsInput = {
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  userGame?: Prisma.UserGameCreateNestedManyWithoutGameInput
  genres?: Prisma.GenreCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameUncheckedCreateWithoutPlatformsInput = {
  id?: number
  igdbId: number
  name: string
  first_release_date?: Date | string | null
  coverUrl?: string | null
  checksum?: string
  userGame?: Prisma.UserGameUncheckedCreateNestedManyWithoutGameInput
  genres?: Prisma.GenreUncheckedCreateNestedManyWithoutIgdbGameInput
}

export type IGDBGameCreateOrConnectWithoutPlatformsInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  create: Prisma.XOR<Prisma.IGDBGameCreateWithoutPlatformsInput, Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput>
}

export type IGDBGameUpsertWithWhereUniqueWithoutPlatformsInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  update: Prisma.XOR<Prisma.IGDBGameUpdateWithoutPlatformsInput, Prisma.IGDBGameUncheckedUpdateWithoutPlatformsInput>
  create: Prisma.XOR<Prisma.IGDBGameCreateWithoutPlatformsInput, Prisma.IGDBGameUncheckedCreateWithoutPlatformsInput>
}

export type IGDBGameUpdateWithWhereUniqueWithoutPlatformsInput = {
  where: Prisma.IGDBGameWhereUniqueInput
  data: Prisma.XOR<Prisma.IGDBGameUpdateWithoutPlatformsInput, Prisma.IGDBGameUncheckedUpdateWithoutPlatformsInput>
}

export type IGDBGameUpdateManyWithWhereWithoutPlatformsInput = {
  where: Prisma.IGDBGameScalarWhereInput
  data: Prisma.XOR<Prisma.IGDBGameUpdateManyMutationInput, Prisma.IGDBGameUncheckedUpdateManyWithoutPlatformsInput>
}

export type IGDBGameUpdateWithoutGenresInput = {
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  userGame?: Prisma.UserGameUpdateManyWithoutGameNestedInput
  platforms?: Prisma.PlatformUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameUncheckedUpdateWithoutGenresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  userGame?: Prisma.UserGameUncheckedUpdateManyWithoutGameNestedInput
  platforms?: Prisma.PlatformUncheckedUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameUncheckedUpdateManyWithoutGenresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IGDBGameUpdateWithoutPlatformsInput = {
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  userGame?: Prisma.UserGameUpdateManyWithoutGameNestedInput
  genres?: Prisma.GenreUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameUncheckedUpdateWithoutPlatformsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
  userGame?: Prisma.UserGameUncheckedUpdateManyWithoutGameNestedInput
  genres?: Prisma.GenreUncheckedUpdateManyWithoutIgdbGameNestedInput
}

export type IGDBGameUncheckedUpdateManyWithoutPlatformsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  igdbId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  first_release_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coverUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  checksum?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type IGDBGameCountOutputType
 */

export type IGDBGameCountOutputType = {
  userGame: number
  genres: number
  platforms: number
}

export type IGDBGameCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userGame?: boolean | IGDBGameCountOutputTypeCountUserGameArgs
  genres?: boolean | IGDBGameCountOutputTypeCountGenresArgs
  platforms?: boolean | IGDBGameCountOutputTypeCountPlatformsArgs
}

/**
 * IGDBGameCountOutputType without action
 */
export type IGDBGameCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGameCountOutputType
   */
  select?: Prisma.IGDBGameCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IGDBGameCountOutputType without action
 */
export type IGDBGameCountOutputTypeCountUserGameArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserGameWhereInput
}

/**
 * IGDBGameCountOutputType without action
 */
export type IGDBGameCountOutputTypeCountGenresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GenreWhereInput
}

/**
 * IGDBGameCountOutputType without action
 */
export type IGDBGameCountOutputTypeCountPlatformsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlatformWhereInput
}


export type IGDBGameSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  igdbId?: boolean
  name?: boolean
  first_release_date?: boolean
  coverUrl?: boolean
  checksum?: boolean
  userGame?: boolean | Prisma.IGDBGame$userGameArgs<ExtArgs>
  genres?: boolean | Prisma.IGDBGame$genresArgs<ExtArgs>
  platforms?: boolean | Prisma.IGDBGame$platformsArgs<ExtArgs>
  _count?: boolean | Prisma.IGDBGameCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["iGDBGame"]>

export type IGDBGameSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  igdbId?: boolean
  name?: boolean
  first_release_date?: boolean
  coverUrl?: boolean
  checksum?: boolean
}, ExtArgs["result"]["iGDBGame"]>

export type IGDBGameSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  igdbId?: boolean
  name?: boolean
  first_release_date?: boolean
  coverUrl?: boolean
  checksum?: boolean
}, ExtArgs["result"]["iGDBGame"]>

export type IGDBGameSelectScalar = {
  id?: boolean
  igdbId?: boolean
  name?: boolean
  first_release_date?: boolean
  coverUrl?: boolean
  checksum?: boolean
}

export type IGDBGameOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "igdbId" | "name" | "first_release_date" | "coverUrl" | "checksum", ExtArgs["result"]["iGDBGame"]>
export type IGDBGameInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userGame?: boolean | Prisma.IGDBGame$userGameArgs<ExtArgs>
  genres?: boolean | Prisma.IGDBGame$genresArgs<ExtArgs>
  platforms?: boolean | Prisma.IGDBGame$platformsArgs<ExtArgs>
  _count?: boolean | Prisma.IGDBGameCountOutputTypeDefaultArgs<ExtArgs>
}
export type IGDBGameIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type IGDBGameIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $IGDBGamePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IGDBGame"
  objects: {
    userGame: Prisma.$UserGamePayload<ExtArgs>[]
    genres: Prisma.$GenrePayload<ExtArgs>[]
    platforms: Prisma.$PlatformPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    igdbId: number
    name: string
    first_release_date: Date | null
    coverUrl: string | null
    checksum: string
  }, ExtArgs["result"]["iGDBGame"]>
  composites: {}
}

export type IGDBGameGetPayload<S extends boolean | null | undefined | IGDBGameDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload, S>

export type IGDBGameCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IGDBGameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IGDBGameCountAggregateInputType | true
  }

export interface IGDBGameDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IGDBGame'], meta: { name: 'IGDBGame' } }
  /**
   * Find zero or one IGDBGame that matches the filter.
   * @param {IGDBGameFindUniqueArgs} args - Arguments to find a IGDBGame
   * @example
   * // Get one IGDBGame
   * const iGDBGame = await prisma.iGDBGame.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IGDBGameFindUniqueArgs>(args: Prisma.SelectSubset<T, IGDBGameFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IGDBGame that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IGDBGameFindUniqueOrThrowArgs} args - Arguments to find a IGDBGame
   * @example
   * // Get one IGDBGame
   * const iGDBGame = await prisma.iGDBGame.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IGDBGameFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IGDBGameFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IGDBGame that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameFindFirstArgs} args - Arguments to find a IGDBGame
   * @example
   * // Get one IGDBGame
   * const iGDBGame = await prisma.iGDBGame.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IGDBGameFindFirstArgs>(args?: Prisma.SelectSubset<T, IGDBGameFindFirstArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IGDBGame that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameFindFirstOrThrowArgs} args - Arguments to find a IGDBGame
   * @example
   * // Get one IGDBGame
   * const iGDBGame = await prisma.iGDBGame.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IGDBGameFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IGDBGameFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IGDBGames that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IGDBGames
   * const iGDBGames = await prisma.iGDBGame.findMany()
   * 
   * // Get first 10 IGDBGames
   * const iGDBGames = await prisma.iGDBGame.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const iGDBGameWithIdOnly = await prisma.iGDBGame.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IGDBGameFindManyArgs>(args?: Prisma.SelectSubset<T, IGDBGameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IGDBGame.
   * @param {IGDBGameCreateArgs} args - Arguments to create a IGDBGame.
   * @example
   * // Create one IGDBGame
   * const IGDBGame = await prisma.iGDBGame.create({
   *   data: {
   *     // ... data to create a IGDBGame
   *   }
   * })
   * 
   */
  create<T extends IGDBGameCreateArgs>(args: Prisma.SelectSubset<T, IGDBGameCreateArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IGDBGames.
   * @param {IGDBGameCreateManyArgs} args - Arguments to create many IGDBGames.
   * @example
   * // Create many IGDBGames
   * const iGDBGame = await prisma.iGDBGame.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IGDBGameCreateManyArgs>(args?: Prisma.SelectSubset<T, IGDBGameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IGDBGames and returns the data saved in the database.
   * @param {IGDBGameCreateManyAndReturnArgs} args - Arguments to create many IGDBGames.
   * @example
   * // Create many IGDBGames
   * const iGDBGame = await prisma.iGDBGame.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IGDBGames and only return the `id`
   * const iGDBGameWithIdOnly = await prisma.iGDBGame.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IGDBGameCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IGDBGameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IGDBGame.
   * @param {IGDBGameDeleteArgs} args - Arguments to delete one IGDBGame.
   * @example
   * // Delete one IGDBGame
   * const IGDBGame = await prisma.iGDBGame.delete({
   *   where: {
   *     // ... filter to delete one IGDBGame
   *   }
   * })
   * 
   */
  delete<T extends IGDBGameDeleteArgs>(args: Prisma.SelectSubset<T, IGDBGameDeleteArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IGDBGame.
   * @param {IGDBGameUpdateArgs} args - Arguments to update one IGDBGame.
   * @example
   * // Update one IGDBGame
   * const iGDBGame = await prisma.iGDBGame.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IGDBGameUpdateArgs>(args: Prisma.SelectSubset<T, IGDBGameUpdateArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IGDBGames.
   * @param {IGDBGameDeleteManyArgs} args - Arguments to filter IGDBGames to delete.
   * @example
   * // Delete a few IGDBGames
   * const { count } = await prisma.iGDBGame.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IGDBGameDeleteManyArgs>(args?: Prisma.SelectSubset<T, IGDBGameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IGDBGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IGDBGames
   * const iGDBGame = await prisma.iGDBGame.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IGDBGameUpdateManyArgs>(args: Prisma.SelectSubset<T, IGDBGameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IGDBGames and returns the data updated in the database.
   * @param {IGDBGameUpdateManyAndReturnArgs} args - Arguments to update many IGDBGames.
   * @example
   * // Update many IGDBGames
   * const iGDBGame = await prisma.iGDBGame.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IGDBGames and only return the `id`
   * const iGDBGameWithIdOnly = await prisma.iGDBGame.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IGDBGameUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IGDBGameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IGDBGame.
   * @param {IGDBGameUpsertArgs} args - Arguments to update or create a IGDBGame.
   * @example
   * // Update or create a IGDBGame
   * const iGDBGame = await prisma.iGDBGame.upsert({
   *   create: {
   *     // ... data to create a IGDBGame
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IGDBGame we want to update
   *   }
   * })
   */
  upsert<T extends IGDBGameUpsertArgs>(args: Prisma.SelectSubset<T, IGDBGameUpsertArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IGDBGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameCountArgs} args - Arguments to filter IGDBGames to count.
   * @example
   * // Count the number of IGDBGames
   * const count = await prisma.iGDBGame.count({
   *   where: {
   *     // ... the filter for the IGDBGames we want to count
   *   }
   * })
  **/
  count<T extends IGDBGameCountArgs>(
    args?: Prisma.Subset<T, IGDBGameCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IGDBGameCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IGDBGame.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IGDBGameAggregateArgs>(args: Prisma.Subset<T, IGDBGameAggregateArgs>): Prisma.PrismaPromise<GetIGDBGameAggregateType<T>>

  /**
   * Group by IGDBGame.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBGameGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IGDBGameGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IGDBGameGroupByArgs['orderBy'] }
      : { orderBy?: IGDBGameGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IGDBGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIGDBGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IGDBGame model
 */
readonly fields: IGDBGameFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IGDBGame.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IGDBGameClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  userGame<T extends Prisma.IGDBGame$userGameArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IGDBGame$userGameArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  genres<T extends Prisma.IGDBGame$genresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IGDBGame$genresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  platforms<T extends Prisma.IGDBGame$platformsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IGDBGame$platformsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IGDBGame model
 */
export interface IGDBGameFieldRefs {
  readonly id: Prisma.FieldRef<"IGDBGame", 'Int'>
  readonly igdbId: Prisma.FieldRef<"IGDBGame", 'Int'>
  readonly name: Prisma.FieldRef<"IGDBGame", 'String'>
  readonly first_release_date: Prisma.FieldRef<"IGDBGame", 'DateTime'>
  readonly coverUrl: Prisma.FieldRef<"IGDBGame", 'String'>
  readonly checksum: Prisma.FieldRef<"IGDBGame", 'String'>
}
    

// Custom InputTypes
/**
 * IGDBGame findUnique
 */
export type IGDBGameFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * Filter, which IGDBGame to fetch.
   */
  where: Prisma.IGDBGameWhereUniqueInput
}

/**
 * IGDBGame findUniqueOrThrow
 */
export type IGDBGameFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * Filter, which IGDBGame to fetch.
   */
  where: Prisma.IGDBGameWhereUniqueInput
}

/**
 * IGDBGame findFirst
 */
export type IGDBGameFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * Filter, which IGDBGame to fetch.
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBGames to fetch.
   */
  orderBy?: Prisma.IGDBGameOrderByWithRelationInput | Prisma.IGDBGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IGDBGames.
   */
  cursor?: Prisma.IGDBGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IGDBGames.
   */
  distinct?: Prisma.IGDBGameScalarFieldEnum | Prisma.IGDBGameScalarFieldEnum[]
}

/**
 * IGDBGame findFirstOrThrow
 */
export type IGDBGameFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * Filter, which IGDBGame to fetch.
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBGames to fetch.
   */
  orderBy?: Prisma.IGDBGameOrderByWithRelationInput | Prisma.IGDBGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IGDBGames.
   */
  cursor?: Prisma.IGDBGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IGDBGames.
   */
  distinct?: Prisma.IGDBGameScalarFieldEnum | Prisma.IGDBGameScalarFieldEnum[]
}

/**
 * IGDBGame findMany
 */
export type IGDBGameFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * Filter, which IGDBGames to fetch.
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBGames to fetch.
   */
  orderBy?: Prisma.IGDBGameOrderByWithRelationInput | Prisma.IGDBGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IGDBGames.
   */
  cursor?: Prisma.IGDBGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBGames.
   */
  skip?: number
  distinct?: Prisma.IGDBGameScalarFieldEnum | Prisma.IGDBGameScalarFieldEnum[]
}

/**
 * IGDBGame create
 */
export type IGDBGameCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * The data needed to create a IGDBGame.
   */
  data: Prisma.XOR<Prisma.IGDBGameCreateInput, Prisma.IGDBGameUncheckedCreateInput>
}

/**
 * IGDBGame createMany
 */
export type IGDBGameCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IGDBGames.
   */
  data: Prisma.IGDBGameCreateManyInput | Prisma.IGDBGameCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IGDBGame createManyAndReturn
 */
export type IGDBGameCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * The data used to create many IGDBGames.
   */
  data: Prisma.IGDBGameCreateManyInput | Prisma.IGDBGameCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IGDBGame update
 */
export type IGDBGameUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * The data needed to update a IGDBGame.
   */
  data: Prisma.XOR<Prisma.IGDBGameUpdateInput, Prisma.IGDBGameUncheckedUpdateInput>
  /**
   * Choose, which IGDBGame to update.
   */
  where: Prisma.IGDBGameWhereUniqueInput
}

/**
 * IGDBGame updateMany
 */
export type IGDBGameUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IGDBGames.
   */
  data: Prisma.XOR<Prisma.IGDBGameUpdateManyMutationInput, Prisma.IGDBGameUncheckedUpdateManyInput>
  /**
   * Filter which IGDBGames to update
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * Limit how many IGDBGames to update.
   */
  limit?: number
}

/**
 * IGDBGame updateManyAndReturn
 */
export type IGDBGameUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * The data used to update IGDBGames.
   */
  data: Prisma.XOR<Prisma.IGDBGameUpdateManyMutationInput, Prisma.IGDBGameUncheckedUpdateManyInput>
  /**
   * Filter which IGDBGames to update
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * Limit how many IGDBGames to update.
   */
  limit?: number
}

/**
 * IGDBGame upsert
 */
export type IGDBGameUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * The filter to search for the IGDBGame to update in case it exists.
   */
  where: Prisma.IGDBGameWhereUniqueInput
  /**
   * In case the IGDBGame found by the `where` argument doesn't exist, create a new IGDBGame with this data.
   */
  create: Prisma.XOR<Prisma.IGDBGameCreateInput, Prisma.IGDBGameUncheckedCreateInput>
  /**
   * In case the IGDBGame was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IGDBGameUpdateInput, Prisma.IGDBGameUncheckedUpdateInput>
}

/**
 * IGDBGame delete
 */
export type IGDBGameDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
  /**
   * Filter which IGDBGame to delete.
   */
  where: Prisma.IGDBGameWhereUniqueInput
}

/**
 * IGDBGame deleteMany
 */
export type IGDBGameDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IGDBGames to delete
   */
  where?: Prisma.IGDBGameWhereInput
  /**
   * Limit how many IGDBGames to delete.
   */
  limit?: number
}

/**
 * IGDBGame.userGame
 */
export type IGDBGame$userGameArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  where?: Prisma.UserGameWhereInput
  orderBy?: Prisma.UserGameOrderByWithRelationInput | Prisma.UserGameOrderByWithRelationInput[]
  cursor?: Prisma.UserGameWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserGameScalarFieldEnum | Prisma.UserGameScalarFieldEnum[]
}

/**
 * IGDBGame.genres
 */
export type IGDBGame$genresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  where?: Prisma.GenreWhereInput
  orderBy?: Prisma.GenreOrderByWithRelationInput | Prisma.GenreOrderByWithRelationInput[]
  cursor?: Prisma.GenreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GenreScalarFieldEnum | Prisma.GenreScalarFieldEnum[]
}

/**
 * IGDBGame.platforms
 */
export type IGDBGame$platformsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Platform
   */
  select?: Prisma.PlatformSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Platform
   */
  omit?: Prisma.PlatformOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformInclude<ExtArgs> | null
  where?: Prisma.PlatformWhereInput
  orderBy?: Prisma.PlatformOrderByWithRelationInput | Prisma.PlatformOrderByWithRelationInput[]
  cursor?: Prisma.PlatformWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlatformScalarFieldEnum | Prisma.PlatformScalarFieldEnum[]
}

/**
 * IGDBGame without action
 */
export type IGDBGameDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBGame
   */
  select?: Prisma.IGDBGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBGame
   */
  omit?: Prisma.IGDBGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IGDBGameInclude<ExtArgs> | null
}
