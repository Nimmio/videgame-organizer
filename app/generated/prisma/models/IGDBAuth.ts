
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IGDBAuth` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IGDBAuth
 * 
 */
export type IGDBAuthModel = runtime.Types.Result.DefaultSelection<Prisma.$IGDBAuthPayload>

export type AggregateIGDBAuth = {
  _count: IGDBAuthCountAggregateOutputType | null
  _avg: IGDBAuthAvgAggregateOutputType | null
  _sum: IGDBAuthSumAggregateOutputType | null
  _min: IGDBAuthMinAggregateOutputType | null
  _max: IGDBAuthMaxAggregateOutputType | null
}

export type IGDBAuthAvgAggregateOutputType = {
  id: number | null
}

export type IGDBAuthSumAggregateOutputType = {
  id: number | null
}

export type IGDBAuthMinAggregateOutputType = {
  id: number | null
  access_token: string | null
  expires: Date | null
  updatedAt: Date | null
}

export type IGDBAuthMaxAggregateOutputType = {
  id: number | null
  access_token: string | null
  expires: Date | null
  updatedAt: Date | null
}

export type IGDBAuthCountAggregateOutputType = {
  id: number
  access_token: number
  expires: number
  updatedAt: number
  _all: number
}


export type IGDBAuthAvgAggregateInputType = {
  id?: true
}

export type IGDBAuthSumAggregateInputType = {
  id?: true
}

export type IGDBAuthMinAggregateInputType = {
  id?: true
  access_token?: true
  expires?: true
  updatedAt?: true
}

export type IGDBAuthMaxAggregateInputType = {
  id?: true
  access_token?: true
  expires?: true
  updatedAt?: true
}

export type IGDBAuthCountAggregateInputType = {
  id?: true
  access_token?: true
  expires?: true
  updatedAt?: true
  _all?: true
}

export type IGDBAuthAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IGDBAuth to aggregate.
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBAuths to fetch.
   */
  orderBy?: Prisma.IGDBAuthOrderByWithRelationInput | Prisma.IGDBAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IGDBAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBAuths.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IGDBAuths
  **/
  _count?: true | IGDBAuthCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IGDBAuthAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IGDBAuthSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IGDBAuthMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IGDBAuthMaxAggregateInputType
}

export type GetIGDBAuthAggregateType<T extends IGDBAuthAggregateArgs> = {
      [P in keyof T & keyof AggregateIGDBAuth]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIGDBAuth[P]>
    : Prisma.GetScalarType<T[P], AggregateIGDBAuth[P]>
}




export type IGDBAuthGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IGDBAuthWhereInput
  orderBy?: Prisma.IGDBAuthOrderByWithAggregationInput | Prisma.IGDBAuthOrderByWithAggregationInput[]
  by: Prisma.IGDBAuthScalarFieldEnum[] | Prisma.IGDBAuthScalarFieldEnum
  having?: Prisma.IGDBAuthScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IGDBAuthCountAggregateInputType | true
  _avg?: IGDBAuthAvgAggregateInputType
  _sum?: IGDBAuthSumAggregateInputType
  _min?: IGDBAuthMinAggregateInputType
  _max?: IGDBAuthMaxAggregateInputType
}

export type IGDBAuthGroupByOutputType = {
  id: number
  access_token: string | null
  expires: Date | null
  updatedAt: Date
  _count: IGDBAuthCountAggregateOutputType | null
  _avg: IGDBAuthAvgAggregateOutputType | null
  _sum: IGDBAuthSumAggregateOutputType | null
  _min: IGDBAuthMinAggregateOutputType | null
  _max: IGDBAuthMaxAggregateOutputType | null
}

type GetIGDBAuthGroupByPayload<T extends IGDBAuthGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IGDBAuthGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IGDBAuthGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IGDBAuthGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IGDBAuthGroupByOutputType[P]>
      }
    >
  > 



export type IGDBAuthWhereInput = {
  AND?: Prisma.IGDBAuthWhereInput | Prisma.IGDBAuthWhereInput[]
  OR?: Prisma.IGDBAuthWhereInput[]
  NOT?: Prisma.IGDBAuthWhereInput | Prisma.IGDBAuthWhereInput[]
  id?: Prisma.IntFilter<"IGDBAuth"> | number
  access_token?: Prisma.StringNullableFilter<"IGDBAuth"> | string | null
  expires?: Prisma.DateTimeNullableFilter<"IGDBAuth"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"IGDBAuth"> | Date | string
}

export type IGDBAuthOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  access_token?: Prisma.SortOrderInput | Prisma.SortOrder
  expires?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IGDBAuthWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IGDBAuthWhereInput | Prisma.IGDBAuthWhereInput[]
  OR?: Prisma.IGDBAuthWhereInput[]
  NOT?: Prisma.IGDBAuthWhereInput | Prisma.IGDBAuthWhereInput[]
  access_token?: Prisma.StringNullableFilter<"IGDBAuth"> | string | null
  expires?: Prisma.DateTimeNullableFilter<"IGDBAuth"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"IGDBAuth"> | Date | string
}, "id">

export type IGDBAuthOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  access_token?: Prisma.SortOrderInput | Prisma.SortOrder
  expires?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.IGDBAuthCountOrderByAggregateInput
  _avg?: Prisma.IGDBAuthAvgOrderByAggregateInput
  _max?: Prisma.IGDBAuthMaxOrderByAggregateInput
  _min?: Prisma.IGDBAuthMinOrderByAggregateInput
  _sum?: Prisma.IGDBAuthSumOrderByAggregateInput
}

export type IGDBAuthScalarWhereWithAggregatesInput = {
  AND?: Prisma.IGDBAuthScalarWhereWithAggregatesInput | Prisma.IGDBAuthScalarWhereWithAggregatesInput[]
  OR?: Prisma.IGDBAuthScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IGDBAuthScalarWhereWithAggregatesInput | Prisma.IGDBAuthScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"IGDBAuth"> | number
  access_token?: Prisma.StringNullableWithAggregatesFilter<"IGDBAuth"> | string | null
  expires?: Prisma.DateTimeNullableWithAggregatesFilter<"IGDBAuth"> | Date | string | null
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"IGDBAuth"> | Date | string
}

export type IGDBAuthCreateInput = {
  access_token?: string | null
  expires?: Date | string | null
  updatedAt: Date | string
}

export type IGDBAuthUncheckedCreateInput = {
  id?: number
  access_token?: string | null
  expires?: Date | string | null
  updatedAt: Date | string
}

export type IGDBAuthUpdateInput = {
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expires?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IGDBAuthUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expires?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IGDBAuthCreateManyInput = {
  id?: number
  access_token?: string | null
  expires?: Date | string | null
  updatedAt: Date | string
}

export type IGDBAuthUpdateManyMutationInput = {
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expires?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IGDBAuthUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expires?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IGDBAuthCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  access_token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IGDBAuthAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IGDBAuthMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  access_token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IGDBAuthMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  access_token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IGDBAuthSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type IGDBAuthSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  access_token?: boolean
  expires?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["iGDBAuth"]>

export type IGDBAuthSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  access_token?: boolean
  expires?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["iGDBAuth"]>

export type IGDBAuthSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  access_token?: boolean
  expires?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["iGDBAuth"]>

export type IGDBAuthSelectScalar = {
  id?: boolean
  access_token?: boolean
  expires?: boolean
  updatedAt?: boolean
}

export type IGDBAuthOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "access_token" | "expires" | "updatedAt", ExtArgs["result"]["iGDBAuth"]>

export type $IGDBAuthPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IGDBAuth"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    access_token: string | null
    expires: Date | null
    updatedAt: Date
  }, ExtArgs["result"]["iGDBAuth"]>
  composites: {}
}

export type IGDBAuthGetPayload<S extends boolean | null | undefined | IGDBAuthDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload, S>

export type IGDBAuthCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IGDBAuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IGDBAuthCountAggregateInputType | true
  }

export interface IGDBAuthDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IGDBAuth'], meta: { name: 'IGDBAuth' } }
  /**
   * Find zero or one IGDBAuth that matches the filter.
   * @param {IGDBAuthFindUniqueArgs} args - Arguments to find a IGDBAuth
   * @example
   * // Get one IGDBAuth
   * const iGDBAuth = await prisma.iGDBAuth.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IGDBAuthFindUniqueArgs>(args: Prisma.SelectSubset<T, IGDBAuthFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IGDBAuth that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IGDBAuthFindUniqueOrThrowArgs} args - Arguments to find a IGDBAuth
   * @example
   * // Get one IGDBAuth
   * const iGDBAuth = await prisma.iGDBAuth.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IGDBAuthFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IGDBAuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IGDBAuth that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthFindFirstArgs} args - Arguments to find a IGDBAuth
   * @example
   * // Get one IGDBAuth
   * const iGDBAuth = await prisma.iGDBAuth.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IGDBAuthFindFirstArgs>(args?: Prisma.SelectSubset<T, IGDBAuthFindFirstArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IGDBAuth that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthFindFirstOrThrowArgs} args - Arguments to find a IGDBAuth
   * @example
   * // Get one IGDBAuth
   * const iGDBAuth = await prisma.iGDBAuth.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IGDBAuthFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IGDBAuthFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IGDBAuths that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IGDBAuths
   * const iGDBAuths = await prisma.iGDBAuth.findMany()
   * 
   * // Get first 10 IGDBAuths
   * const iGDBAuths = await prisma.iGDBAuth.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const iGDBAuthWithIdOnly = await prisma.iGDBAuth.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IGDBAuthFindManyArgs>(args?: Prisma.SelectSubset<T, IGDBAuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IGDBAuth.
   * @param {IGDBAuthCreateArgs} args - Arguments to create a IGDBAuth.
   * @example
   * // Create one IGDBAuth
   * const IGDBAuth = await prisma.iGDBAuth.create({
   *   data: {
   *     // ... data to create a IGDBAuth
   *   }
   * })
   * 
   */
  create<T extends IGDBAuthCreateArgs>(args: Prisma.SelectSubset<T, IGDBAuthCreateArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IGDBAuths.
   * @param {IGDBAuthCreateManyArgs} args - Arguments to create many IGDBAuths.
   * @example
   * // Create many IGDBAuths
   * const iGDBAuth = await prisma.iGDBAuth.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IGDBAuthCreateManyArgs>(args?: Prisma.SelectSubset<T, IGDBAuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IGDBAuths and returns the data saved in the database.
   * @param {IGDBAuthCreateManyAndReturnArgs} args - Arguments to create many IGDBAuths.
   * @example
   * // Create many IGDBAuths
   * const iGDBAuth = await prisma.iGDBAuth.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IGDBAuths and only return the `id`
   * const iGDBAuthWithIdOnly = await prisma.iGDBAuth.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IGDBAuthCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IGDBAuthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IGDBAuth.
   * @param {IGDBAuthDeleteArgs} args - Arguments to delete one IGDBAuth.
   * @example
   * // Delete one IGDBAuth
   * const IGDBAuth = await prisma.iGDBAuth.delete({
   *   where: {
   *     // ... filter to delete one IGDBAuth
   *   }
   * })
   * 
   */
  delete<T extends IGDBAuthDeleteArgs>(args: Prisma.SelectSubset<T, IGDBAuthDeleteArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IGDBAuth.
   * @param {IGDBAuthUpdateArgs} args - Arguments to update one IGDBAuth.
   * @example
   * // Update one IGDBAuth
   * const iGDBAuth = await prisma.iGDBAuth.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IGDBAuthUpdateArgs>(args: Prisma.SelectSubset<T, IGDBAuthUpdateArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IGDBAuths.
   * @param {IGDBAuthDeleteManyArgs} args - Arguments to filter IGDBAuths to delete.
   * @example
   * // Delete a few IGDBAuths
   * const { count } = await prisma.iGDBAuth.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IGDBAuthDeleteManyArgs>(args?: Prisma.SelectSubset<T, IGDBAuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IGDBAuths.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IGDBAuths
   * const iGDBAuth = await prisma.iGDBAuth.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IGDBAuthUpdateManyArgs>(args: Prisma.SelectSubset<T, IGDBAuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IGDBAuths and returns the data updated in the database.
   * @param {IGDBAuthUpdateManyAndReturnArgs} args - Arguments to update many IGDBAuths.
   * @example
   * // Update many IGDBAuths
   * const iGDBAuth = await prisma.iGDBAuth.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IGDBAuths and only return the `id`
   * const iGDBAuthWithIdOnly = await prisma.iGDBAuth.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IGDBAuthUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IGDBAuthUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IGDBAuth.
   * @param {IGDBAuthUpsertArgs} args - Arguments to update or create a IGDBAuth.
   * @example
   * // Update or create a IGDBAuth
   * const iGDBAuth = await prisma.iGDBAuth.upsert({
   *   create: {
   *     // ... data to create a IGDBAuth
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IGDBAuth we want to update
   *   }
   * })
   */
  upsert<T extends IGDBAuthUpsertArgs>(args: Prisma.SelectSubset<T, IGDBAuthUpsertArgs<ExtArgs>>): Prisma.Prisma__IGDBAuthClient<runtime.Types.Result.GetResult<Prisma.$IGDBAuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IGDBAuths.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthCountArgs} args - Arguments to filter IGDBAuths to count.
   * @example
   * // Count the number of IGDBAuths
   * const count = await prisma.iGDBAuth.count({
   *   where: {
   *     // ... the filter for the IGDBAuths we want to count
   *   }
   * })
  **/
  count<T extends IGDBAuthCountArgs>(
    args?: Prisma.Subset<T, IGDBAuthCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IGDBAuthCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IGDBAuth.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IGDBAuthAggregateArgs>(args: Prisma.Subset<T, IGDBAuthAggregateArgs>): Prisma.PrismaPromise<GetIGDBAuthAggregateType<T>>

  /**
   * Group by IGDBAuth.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IGDBAuthGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IGDBAuthGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IGDBAuthGroupByArgs['orderBy'] }
      : { orderBy?: IGDBAuthGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IGDBAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIGDBAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IGDBAuth model
 */
readonly fields: IGDBAuthFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IGDBAuth.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IGDBAuthClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IGDBAuth model
 */
export interface IGDBAuthFieldRefs {
  readonly id: Prisma.FieldRef<"IGDBAuth", 'Int'>
  readonly access_token: Prisma.FieldRef<"IGDBAuth", 'String'>
  readonly expires: Prisma.FieldRef<"IGDBAuth", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"IGDBAuth", 'DateTime'>
}
    

// Custom InputTypes
/**
 * IGDBAuth findUnique
 */
export type IGDBAuthFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * Filter, which IGDBAuth to fetch.
   */
  where: Prisma.IGDBAuthWhereUniqueInput
}

/**
 * IGDBAuth findUniqueOrThrow
 */
export type IGDBAuthFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * Filter, which IGDBAuth to fetch.
   */
  where: Prisma.IGDBAuthWhereUniqueInput
}

/**
 * IGDBAuth findFirst
 */
export type IGDBAuthFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * Filter, which IGDBAuth to fetch.
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBAuths to fetch.
   */
  orderBy?: Prisma.IGDBAuthOrderByWithRelationInput | Prisma.IGDBAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IGDBAuths.
   */
  cursor?: Prisma.IGDBAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBAuths.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IGDBAuths.
   */
  distinct?: Prisma.IGDBAuthScalarFieldEnum | Prisma.IGDBAuthScalarFieldEnum[]
}

/**
 * IGDBAuth findFirstOrThrow
 */
export type IGDBAuthFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * Filter, which IGDBAuth to fetch.
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBAuths to fetch.
   */
  orderBy?: Prisma.IGDBAuthOrderByWithRelationInput | Prisma.IGDBAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IGDBAuths.
   */
  cursor?: Prisma.IGDBAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBAuths.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IGDBAuths.
   */
  distinct?: Prisma.IGDBAuthScalarFieldEnum | Prisma.IGDBAuthScalarFieldEnum[]
}

/**
 * IGDBAuth findMany
 */
export type IGDBAuthFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * Filter, which IGDBAuths to fetch.
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IGDBAuths to fetch.
   */
  orderBy?: Prisma.IGDBAuthOrderByWithRelationInput | Prisma.IGDBAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IGDBAuths.
   */
  cursor?: Prisma.IGDBAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IGDBAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IGDBAuths.
   */
  skip?: number
  distinct?: Prisma.IGDBAuthScalarFieldEnum | Prisma.IGDBAuthScalarFieldEnum[]
}

/**
 * IGDBAuth create
 */
export type IGDBAuthCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * The data needed to create a IGDBAuth.
   */
  data: Prisma.XOR<Prisma.IGDBAuthCreateInput, Prisma.IGDBAuthUncheckedCreateInput>
}

/**
 * IGDBAuth createMany
 */
export type IGDBAuthCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IGDBAuths.
   */
  data: Prisma.IGDBAuthCreateManyInput | Prisma.IGDBAuthCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IGDBAuth createManyAndReturn
 */
export type IGDBAuthCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * The data used to create many IGDBAuths.
   */
  data: Prisma.IGDBAuthCreateManyInput | Prisma.IGDBAuthCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IGDBAuth update
 */
export type IGDBAuthUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * The data needed to update a IGDBAuth.
   */
  data: Prisma.XOR<Prisma.IGDBAuthUpdateInput, Prisma.IGDBAuthUncheckedUpdateInput>
  /**
   * Choose, which IGDBAuth to update.
   */
  where: Prisma.IGDBAuthWhereUniqueInput
}

/**
 * IGDBAuth updateMany
 */
export type IGDBAuthUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IGDBAuths.
   */
  data: Prisma.XOR<Prisma.IGDBAuthUpdateManyMutationInput, Prisma.IGDBAuthUncheckedUpdateManyInput>
  /**
   * Filter which IGDBAuths to update
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * Limit how many IGDBAuths to update.
   */
  limit?: number
}

/**
 * IGDBAuth updateManyAndReturn
 */
export type IGDBAuthUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * The data used to update IGDBAuths.
   */
  data: Prisma.XOR<Prisma.IGDBAuthUpdateManyMutationInput, Prisma.IGDBAuthUncheckedUpdateManyInput>
  /**
   * Filter which IGDBAuths to update
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * Limit how many IGDBAuths to update.
   */
  limit?: number
}

/**
 * IGDBAuth upsert
 */
export type IGDBAuthUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * The filter to search for the IGDBAuth to update in case it exists.
   */
  where: Prisma.IGDBAuthWhereUniqueInput
  /**
   * In case the IGDBAuth found by the `where` argument doesn't exist, create a new IGDBAuth with this data.
   */
  create: Prisma.XOR<Prisma.IGDBAuthCreateInput, Prisma.IGDBAuthUncheckedCreateInput>
  /**
   * In case the IGDBAuth was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IGDBAuthUpdateInput, Prisma.IGDBAuthUncheckedUpdateInput>
}

/**
 * IGDBAuth delete
 */
export type IGDBAuthDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
  /**
   * Filter which IGDBAuth to delete.
   */
  where: Prisma.IGDBAuthWhereUniqueInput
}

/**
 * IGDBAuth deleteMany
 */
export type IGDBAuthDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IGDBAuths to delete
   */
  where?: Prisma.IGDBAuthWhereInput
  /**
   * Limit how many IGDBAuths to delete.
   */
  limit?: number
}

/**
 * IGDBAuth without action
 */
export type IGDBAuthDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IGDBAuth
   */
  select?: Prisma.IGDBAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IGDBAuth
   */
  omit?: Prisma.IGDBAuthOmit<ExtArgs> | null
}
