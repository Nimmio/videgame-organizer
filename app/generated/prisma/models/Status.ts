
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Status` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Status
 * 
 */
export type StatusModel = runtime.Types.Result.DefaultSelection<Prisma.$StatusPayload>

export type AggregateStatus = {
  _count: StatusCountAggregateOutputType | null
  _avg: StatusAvgAggregateOutputType | null
  _sum: StatusSumAggregateOutputType | null
  _min: StatusMinAggregateOutputType | null
  _max: StatusMaxAggregateOutputType | null
}

export type StatusAvgAggregateOutputType = {
  id: number | null
}

export type StatusSumAggregateOutputType = {
  id: number | null
}

export type StatusMinAggregateOutputType = {
  id: number | null
  statusTitle: string | null
  color: string | null
}

export type StatusMaxAggregateOutputType = {
  id: number | null
  statusTitle: string | null
  color: string | null
}

export type StatusCountAggregateOutputType = {
  id: number
  statusTitle: number
  color: number
  _all: number
}


export type StatusAvgAggregateInputType = {
  id?: true
}

export type StatusSumAggregateInputType = {
  id?: true
}

export type StatusMinAggregateInputType = {
  id?: true
  statusTitle?: true
  color?: true
}

export type StatusMaxAggregateInputType = {
  id?: true
  statusTitle?: true
  color?: true
}

export type StatusCountAggregateInputType = {
  id?: true
  statusTitle?: true
  color?: true
  _all?: true
}

export type StatusAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Status to aggregate.
   */
  where?: Prisma.StatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Statuses to fetch.
   */
  orderBy?: Prisma.StatusOrderByWithRelationInput | Prisma.StatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Statuses
  **/
  _count?: true | StatusCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StatusAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StatusSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StatusMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StatusMaxAggregateInputType
}

export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
      [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStatus[P]>
    : Prisma.GetScalarType<T[P], AggregateStatus[P]>
}




export type StatusGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StatusWhereInput
  orderBy?: Prisma.StatusOrderByWithAggregationInput | Prisma.StatusOrderByWithAggregationInput[]
  by: Prisma.StatusScalarFieldEnum[] | Prisma.StatusScalarFieldEnum
  having?: Prisma.StatusScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StatusCountAggregateInputType | true
  _avg?: StatusAvgAggregateInputType
  _sum?: StatusSumAggregateInputType
  _min?: StatusMinAggregateInputType
  _max?: StatusMaxAggregateInputType
}

export type StatusGroupByOutputType = {
  id: number
  statusTitle: string
  color: string
  _count: StatusCountAggregateOutputType | null
  _avg: StatusAvgAggregateOutputType | null
  _sum: StatusSumAggregateOutputType | null
  _min: StatusMinAggregateOutputType | null
  _max: StatusMaxAggregateOutputType | null
}

type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StatusGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StatusGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StatusGroupByOutputType[P]>
      }
    >
  > 



export type StatusWhereInput = {
  AND?: Prisma.StatusWhereInput | Prisma.StatusWhereInput[]
  OR?: Prisma.StatusWhereInput[]
  NOT?: Prisma.StatusWhereInput | Prisma.StatusWhereInput[]
  id?: Prisma.IntFilter<"Status"> | number
  statusTitle?: Prisma.StringFilter<"Status"> | string
  color?: Prisma.StringFilter<"Status"> | string
  games?: Prisma.UserGameListRelationFilter
}

export type StatusOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  statusTitle?: Prisma.SortOrder
  color?: Prisma.SortOrder
  games?: Prisma.UserGameOrderByRelationAggregateInput
}

export type StatusWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.StatusWhereInput | Prisma.StatusWhereInput[]
  OR?: Prisma.StatusWhereInput[]
  NOT?: Prisma.StatusWhereInput | Prisma.StatusWhereInput[]
  statusTitle?: Prisma.StringFilter<"Status"> | string
  color?: Prisma.StringFilter<"Status"> | string
  games?: Prisma.UserGameListRelationFilter
}, "id">

export type StatusOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  statusTitle?: Prisma.SortOrder
  color?: Prisma.SortOrder
  _count?: Prisma.StatusCountOrderByAggregateInput
  _avg?: Prisma.StatusAvgOrderByAggregateInput
  _max?: Prisma.StatusMaxOrderByAggregateInput
  _min?: Prisma.StatusMinOrderByAggregateInput
  _sum?: Prisma.StatusSumOrderByAggregateInput
}

export type StatusScalarWhereWithAggregatesInput = {
  AND?: Prisma.StatusScalarWhereWithAggregatesInput | Prisma.StatusScalarWhereWithAggregatesInput[]
  OR?: Prisma.StatusScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StatusScalarWhereWithAggregatesInput | Prisma.StatusScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Status"> | number
  statusTitle?: Prisma.StringWithAggregatesFilter<"Status"> | string
  color?: Prisma.StringWithAggregatesFilter<"Status"> | string
}

export type StatusCreateInput = {
  statusTitle: string
  color: string
  games?: Prisma.UserGameCreateNestedManyWithoutStatusInput
}

export type StatusUncheckedCreateInput = {
  id?: number
  statusTitle: string
  color: string
  games?: Prisma.UserGameUncheckedCreateNestedManyWithoutStatusInput
}

export type StatusUpdateInput = {
  statusTitle?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  games?: Prisma.UserGameUpdateManyWithoutStatusNestedInput
}

export type StatusUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  statusTitle?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  games?: Prisma.UserGameUncheckedUpdateManyWithoutStatusNestedInput
}

export type StatusCreateManyInput = {
  id?: number
  statusTitle: string
  color: string
}

export type StatusUpdateManyMutationInput = {
  statusTitle?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StatusUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  statusTitle?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StatusScalarRelationFilter = {
  is?: Prisma.StatusWhereInput
  isNot?: Prisma.StatusWhereInput
}

export type StatusCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  statusTitle?: Prisma.SortOrder
  color?: Prisma.SortOrder
}

export type StatusAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StatusMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  statusTitle?: Prisma.SortOrder
  color?: Prisma.SortOrder
}

export type StatusMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  statusTitle?: Prisma.SortOrder
  color?: Prisma.SortOrder
}

export type StatusSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StatusCreateNestedOneWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.StatusCreateWithoutGamesInput, Prisma.StatusUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.StatusCreateOrConnectWithoutGamesInput
  connect?: Prisma.StatusWhereUniqueInput
}

export type StatusUpdateOneRequiredWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.StatusCreateWithoutGamesInput, Prisma.StatusUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.StatusCreateOrConnectWithoutGamesInput
  upsert?: Prisma.StatusUpsertWithoutGamesInput
  connect?: Prisma.StatusWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StatusUpdateToOneWithWhereWithoutGamesInput, Prisma.StatusUpdateWithoutGamesInput>, Prisma.StatusUncheckedUpdateWithoutGamesInput>
}

export type StatusCreateWithoutGamesInput = {
  statusTitle: string
  color: string
}

export type StatusUncheckedCreateWithoutGamesInput = {
  id?: number
  statusTitle: string
  color: string
}

export type StatusCreateOrConnectWithoutGamesInput = {
  where: Prisma.StatusWhereUniqueInput
  create: Prisma.XOR<Prisma.StatusCreateWithoutGamesInput, Prisma.StatusUncheckedCreateWithoutGamesInput>
}

export type StatusUpsertWithoutGamesInput = {
  update: Prisma.XOR<Prisma.StatusUpdateWithoutGamesInput, Prisma.StatusUncheckedUpdateWithoutGamesInput>
  create: Prisma.XOR<Prisma.StatusCreateWithoutGamesInput, Prisma.StatusUncheckedCreateWithoutGamesInput>
  where?: Prisma.StatusWhereInput
}

export type StatusUpdateToOneWithWhereWithoutGamesInput = {
  where?: Prisma.StatusWhereInput
  data: Prisma.XOR<Prisma.StatusUpdateWithoutGamesInput, Prisma.StatusUncheckedUpdateWithoutGamesInput>
}

export type StatusUpdateWithoutGamesInput = {
  statusTitle?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StatusUncheckedUpdateWithoutGamesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  statusTitle?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type StatusCountOutputType
 */

export type StatusCountOutputType = {
  games: number
}

export type StatusCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | StatusCountOutputTypeCountGamesArgs
}

/**
 * StatusCountOutputType without action
 */
export type StatusCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StatusCountOutputType
   */
  select?: Prisma.StatusCountOutputTypeSelect<ExtArgs> | null
}

/**
 * StatusCountOutputType without action
 */
export type StatusCountOutputTypeCountGamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserGameWhereInput
}


export type StatusSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  statusTitle?: boolean
  color?: boolean
  games?: boolean | Prisma.Status$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.StatusCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["status"]>

export type StatusSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  statusTitle?: boolean
  color?: boolean
}, ExtArgs["result"]["status"]>

export type StatusSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  statusTitle?: boolean
  color?: boolean
}, ExtArgs["result"]["status"]>

export type StatusSelectScalar = {
  id?: boolean
  statusTitle?: boolean
  color?: boolean
}

export type StatusOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "statusTitle" | "color", ExtArgs["result"]["status"]>
export type StatusInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.Status$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.StatusCountOutputTypeDefaultArgs<ExtArgs>
}
export type StatusIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type StatusIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $StatusPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Status"
  objects: {
    games: Prisma.$UserGamePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    statusTitle: string
    color: string
  }, ExtArgs["result"]["status"]>
  composites: {}
}

export type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StatusPayload, S>

export type StatusCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StatusCountAggregateInputType | true
  }

export interface StatusDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
  /**
   * Find zero or one Status that matches the filter.
   * @param {StatusFindUniqueArgs} args - Arguments to find a Status
   * @example
   * // Get one Status
   * const status = await prisma.status.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StatusFindUniqueArgs>(args: Prisma.SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Status that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
   * @example
   * // Get one Status
   * const status = await prisma.status.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Status that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusFindFirstArgs} args - Arguments to find a Status
   * @example
   * // Get one Status
   * const status = await prisma.status.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StatusFindFirstArgs>(args?: Prisma.SelectSubset<T, StatusFindFirstArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Status that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
   * @example
   * // Get one Status
   * const status = await prisma.status.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Statuses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Statuses
   * const statuses = await prisma.status.findMany()
   * 
   * // Get first 10 Statuses
   * const statuses = await prisma.status.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StatusFindManyArgs>(args?: Prisma.SelectSubset<T, StatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Status.
   * @param {StatusCreateArgs} args - Arguments to create a Status.
   * @example
   * // Create one Status
   * const Status = await prisma.status.create({
   *   data: {
   *     // ... data to create a Status
   *   }
   * })
   * 
   */
  create<T extends StatusCreateArgs>(args: Prisma.SelectSubset<T, StatusCreateArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Statuses.
   * @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
   * @example
   * // Create many Statuses
   * const status = await prisma.status.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StatusCreateManyArgs>(args?: Prisma.SelectSubset<T, StatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Statuses and returns the data saved in the database.
   * @param {StatusCreateManyAndReturnArgs} args - Arguments to create many Statuses.
   * @example
   * // Create many Statuses
   * const status = await prisma.status.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Statuses and only return the `id`
   * const statusWithIdOnly = await prisma.status.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StatusCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Status.
   * @param {StatusDeleteArgs} args - Arguments to delete one Status.
   * @example
   * // Delete one Status
   * const Status = await prisma.status.delete({
   *   where: {
   *     // ... filter to delete one Status
   *   }
   * })
   * 
   */
  delete<T extends StatusDeleteArgs>(args: Prisma.SelectSubset<T, StatusDeleteArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Status.
   * @param {StatusUpdateArgs} args - Arguments to update one Status.
   * @example
   * // Update one Status
   * const status = await prisma.status.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StatusUpdateArgs>(args: Prisma.SelectSubset<T, StatusUpdateArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Statuses.
   * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
   * @example
   * // Delete a few Statuses
   * const { count } = await prisma.status.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StatusDeleteManyArgs>(args?: Prisma.SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Statuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Statuses
   * const status = await prisma.status.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StatusUpdateManyArgs>(args: Prisma.SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Statuses and returns the data updated in the database.
   * @param {StatusUpdateManyAndReturnArgs} args - Arguments to update many Statuses.
   * @example
   * // Update many Statuses
   * const status = await prisma.status.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Statuses and only return the `id`
   * const statusWithIdOnly = await prisma.status.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StatusUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Status.
   * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
   * @example
   * // Update or create a Status
   * const status = await prisma.status.upsert({
   *   create: {
   *     // ... data to create a Status
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Status we want to update
   *   }
   * })
   */
  upsert<T extends StatusUpsertArgs>(args: Prisma.SelectSubset<T, StatusUpsertArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Statuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
   * @example
   * // Count the number of Statuses
   * const count = await prisma.status.count({
   *   where: {
   *     // ... the filter for the Statuses we want to count
   *   }
   * })
  **/
  count<T extends StatusCountArgs>(
    args?: Prisma.Subset<T, StatusCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StatusCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Status.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StatusAggregateArgs>(args: Prisma.Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

  /**
   * Group by Status.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StatusGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StatusGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StatusGroupByArgs['orderBy'] }
      : { orderBy?: StatusGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Status model
 */
readonly fields: StatusFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Status.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StatusClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  games<T extends Prisma.Status$gamesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Status$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Status model
 */
export interface StatusFieldRefs {
  readonly id: Prisma.FieldRef<"Status", 'Int'>
  readonly statusTitle: Prisma.FieldRef<"Status", 'String'>
  readonly color: Prisma.FieldRef<"Status", 'String'>
}
    

// Custom InputTypes
/**
 * Status findUnique
 */
export type StatusFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * Filter, which Status to fetch.
   */
  where: Prisma.StatusWhereUniqueInput
}

/**
 * Status findUniqueOrThrow
 */
export type StatusFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * Filter, which Status to fetch.
   */
  where: Prisma.StatusWhereUniqueInput
}

/**
 * Status findFirst
 */
export type StatusFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * Filter, which Status to fetch.
   */
  where?: Prisma.StatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Statuses to fetch.
   */
  orderBy?: Prisma.StatusOrderByWithRelationInput | Prisma.StatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Statuses.
   */
  cursor?: Prisma.StatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Statuses.
   */
  distinct?: Prisma.StatusScalarFieldEnum | Prisma.StatusScalarFieldEnum[]
}

/**
 * Status findFirstOrThrow
 */
export type StatusFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * Filter, which Status to fetch.
   */
  where?: Prisma.StatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Statuses to fetch.
   */
  orderBy?: Prisma.StatusOrderByWithRelationInput | Prisma.StatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Statuses.
   */
  cursor?: Prisma.StatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Statuses.
   */
  distinct?: Prisma.StatusScalarFieldEnum | Prisma.StatusScalarFieldEnum[]
}

/**
 * Status findMany
 */
export type StatusFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * Filter, which Statuses to fetch.
   */
  where?: Prisma.StatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Statuses to fetch.
   */
  orderBy?: Prisma.StatusOrderByWithRelationInput | Prisma.StatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Statuses.
   */
  cursor?: Prisma.StatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Statuses.
   */
  skip?: number
  distinct?: Prisma.StatusScalarFieldEnum | Prisma.StatusScalarFieldEnum[]
}

/**
 * Status create
 */
export type StatusCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * The data needed to create a Status.
   */
  data: Prisma.XOR<Prisma.StatusCreateInput, Prisma.StatusUncheckedCreateInput>
}

/**
 * Status createMany
 */
export type StatusCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Statuses.
   */
  data: Prisma.StatusCreateManyInput | Prisma.StatusCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Status createManyAndReturn
 */
export type StatusCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * The data used to create many Statuses.
   */
  data: Prisma.StatusCreateManyInput | Prisma.StatusCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Status update
 */
export type StatusUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * The data needed to update a Status.
   */
  data: Prisma.XOR<Prisma.StatusUpdateInput, Prisma.StatusUncheckedUpdateInput>
  /**
   * Choose, which Status to update.
   */
  where: Prisma.StatusWhereUniqueInput
}

/**
 * Status updateMany
 */
export type StatusUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Statuses.
   */
  data: Prisma.XOR<Prisma.StatusUpdateManyMutationInput, Prisma.StatusUncheckedUpdateManyInput>
  /**
   * Filter which Statuses to update
   */
  where?: Prisma.StatusWhereInput
  /**
   * Limit how many Statuses to update.
   */
  limit?: number
}

/**
 * Status updateManyAndReturn
 */
export type StatusUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * The data used to update Statuses.
   */
  data: Prisma.XOR<Prisma.StatusUpdateManyMutationInput, Prisma.StatusUncheckedUpdateManyInput>
  /**
   * Filter which Statuses to update
   */
  where?: Prisma.StatusWhereInput
  /**
   * Limit how many Statuses to update.
   */
  limit?: number
}

/**
 * Status upsert
 */
export type StatusUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * The filter to search for the Status to update in case it exists.
   */
  where: Prisma.StatusWhereUniqueInput
  /**
   * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
   */
  create: Prisma.XOR<Prisma.StatusCreateInput, Prisma.StatusUncheckedCreateInput>
  /**
   * In case the Status was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StatusUpdateInput, Prisma.StatusUncheckedUpdateInput>
}

/**
 * Status delete
 */
export type StatusDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
  /**
   * Filter which Status to delete.
   */
  where: Prisma.StatusWhereUniqueInput
}

/**
 * Status deleteMany
 */
export type StatusDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Statuses to delete
   */
  where?: Prisma.StatusWhereInput
  /**
   * Limit how many Statuses to delete.
   */
  limit?: number
}

/**
 * Status.games
 */
export type Status$gamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  where?: Prisma.UserGameWhereInput
  orderBy?: Prisma.UserGameOrderByWithRelationInput | Prisma.UserGameOrderByWithRelationInput[]
  cursor?: Prisma.UserGameWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserGameScalarFieldEnum | Prisma.UserGameScalarFieldEnum[]
}

/**
 * Status without action
 */
export type StatusDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Status
   */
  select?: Prisma.StatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Status
   */
  omit?: Prisma.StatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StatusInclude<ExtArgs> | null
}
