
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `System` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model System
 * 
 */
export type SystemModel = runtime.Types.Result.DefaultSelection<Prisma.$SystemPayload>

export type AggregateSystem = {
  _count: SystemCountAggregateOutputType | null
  _avg: SystemAvgAggregateOutputType | null
  _sum: SystemSumAggregateOutputType | null
  _min: SystemMinAggregateOutputType | null
  _max: SystemMaxAggregateOutputType | null
}

export type SystemAvgAggregateOutputType = {
  id: number | null
}

export type SystemSumAggregateOutputType = {
  id: number | null
}

export type SystemMinAggregateOutputType = {
  id: number | null
  message: string | null
}

export type SystemMaxAggregateOutputType = {
  id: number | null
  message: string | null
}

export type SystemCountAggregateOutputType = {
  id: number
  message: number
  _all: number
}


export type SystemAvgAggregateInputType = {
  id?: true
}

export type SystemSumAggregateInputType = {
  id?: true
}

export type SystemMinAggregateInputType = {
  id?: true
  message?: true
}

export type SystemMaxAggregateInputType = {
  id?: true
  message?: true
}

export type SystemCountAggregateInputType = {
  id?: true
  message?: true
  _all?: true
}

export type SystemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which System to aggregate.
   */
  where?: Prisma.SystemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Systems to fetch.
   */
  orderBy?: Prisma.SystemOrderByWithRelationInput | Prisma.SystemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SystemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Systems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Systems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Systems
  **/
  _count?: true | SystemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SystemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SystemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SystemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SystemMaxAggregateInputType
}

export type GetSystemAggregateType<T extends SystemAggregateArgs> = {
      [P in keyof T & keyof AggregateSystem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSystem[P]>
    : Prisma.GetScalarType<T[P], AggregateSystem[P]>
}




export type SystemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SystemWhereInput
  orderBy?: Prisma.SystemOrderByWithAggregationInput | Prisma.SystemOrderByWithAggregationInput[]
  by: Prisma.SystemScalarFieldEnum[] | Prisma.SystemScalarFieldEnum
  having?: Prisma.SystemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SystemCountAggregateInputType | true
  _avg?: SystemAvgAggregateInputType
  _sum?: SystemSumAggregateInputType
  _min?: SystemMinAggregateInputType
  _max?: SystemMaxAggregateInputType
}

export type SystemGroupByOutputType = {
  id: number
  message: string
  _count: SystemCountAggregateOutputType | null
  _avg: SystemAvgAggregateOutputType | null
  _sum: SystemSumAggregateOutputType | null
  _min: SystemMinAggregateOutputType | null
  _max: SystemMaxAggregateOutputType | null
}

type GetSystemGroupByPayload<T extends SystemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SystemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SystemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SystemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SystemGroupByOutputType[P]>
      }
    >
  > 



export type SystemWhereInput = {
  AND?: Prisma.SystemWhereInput | Prisma.SystemWhereInput[]
  OR?: Prisma.SystemWhereInput[]
  NOT?: Prisma.SystemWhereInput | Prisma.SystemWhereInput[]
  id?: Prisma.IntFilter<"System"> | number
  message?: Prisma.StringFilter<"System"> | string
}

export type SystemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
}

export type SystemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SystemWhereInput | Prisma.SystemWhereInput[]
  OR?: Prisma.SystemWhereInput[]
  NOT?: Prisma.SystemWhereInput | Prisma.SystemWhereInput[]
  message?: Prisma.StringFilter<"System"> | string
}, "id">

export type SystemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  _count?: Prisma.SystemCountOrderByAggregateInput
  _avg?: Prisma.SystemAvgOrderByAggregateInput
  _max?: Prisma.SystemMaxOrderByAggregateInput
  _min?: Prisma.SystemMinOrderByAggregateInput
  _sum?: Prisma.SystemSumOrderByAggregateInput
}

export type SystemScalarWhereWithAggregatesInput = {
  AND?: Prisma.SystemScalarWhereWithAggregatesInput | Prisma.SystemScalarWhereWithAggregatesInput[]
  OR?: Prisma.SystemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SystemScalarWhereWithAggregatesInput | Prisma.SystemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"System"> | number
  message?: Prisma.StringWithAggregatesFilter<"System"> | string
}

export type SystemCreateInput = {
  message: string
}

export type SystemUncheckedCreateInput = {
  id?: number
  message: string
}

export type SystemUpdateInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SystemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SystemCreateManyInput = {
  id?: number
  message: string
}

export type SystemUpdateManyMutationInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SystemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SystemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
}

export type SystemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type SystemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
}

export type SystemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
}

export type SystemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type SystemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
}, ExtArgs["result"]["system"]>

export type SystemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
}, ExtArgs["result"]["system"]>

export type SystemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
}, ExtArgs["result"]["system"]>

export type SystemSelectScalar = {
  id?: boolean
  message?: boolean
}

export type SystemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "message", ExtArgs["result"]["system"]>

export type $SystemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "System"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    message: string
  }, ExtArgs["result"]["system"]>
  composites: {}
}

export type SystemGetPayload<S extends boolean | null | undefined | SystemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SystemPayload, S>

export type SystemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SystemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SystemCountAggregateInputType | true
  }

export interface SystemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['System'], meta: { name: 'System' } }
  /**
   * Find zero or one System that matches the filter.
   * @param {SystemFindUniqueArgs} args - Arguments to find a System
   * @example
   * // Get one System
   * const system = await prisma.system.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SystemFindUniqueArgs>(args: Prisma.SelectSubset<T, SystemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one System that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SystemFindUniqueOrThrowArgs} args - Arguments to find a System
   * @example
   * // Get one System
   * const system = await prisma.system.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SystemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SystemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first System that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemFindFirstArgs} args - Arguments to find a System
   * @example
   * // Get one System
   * const system = await prisma.system.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SystemFindFirstArgs>(args?: Prisma.SelectSubset<T, SystemFindFirstArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first System that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemFindFirstOrThrowArgs} args - Arguments to find a System
   * @example
   * // Get one System
   * const system = await prisma.system.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SystemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SystemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Systems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Systems
   * const systems = await prisma.system.findMany()
   * 
   * // Get first 10 Systems
   * const systems = await prisma.system.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const systemWithIdOnly = await prisma.system.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SystemFindManyArgs>(args?: Prisma.SelectSubset<T, SystemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a System.
   * @param {SystemCreateArgs} args - Arguments to create a System.
   * @example
   * // Create one System
   * const System = await prisma.system.create({
   *   data: {
   *     // ... data to create a System
   *   }
   * })
   * 
   */
  create<T extends SystemCreateArgs>(args: Prisma.SelectSubset<T, SystemCreateArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Systems.
   * @param {SystemCreateManyArgs} args - Arguments to create many Systems.
   * @example
   * // Create many Systems
   * const system = await prisma.system.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SystemCreateManyArgs>(args?: Prisma.SelectSubset<T, SystemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Systems and returns the data saved in the database.
   * @param {SystemCreateManyAndReturnArgs} args - Arguments to create many Systems.
   * @example
   * // Create many Systems
   * const system = await prisma.system.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Systems and only return the `id`
   * const systemWithIdOnly = await prisma.system.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SystemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SystemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a System.
   * @param {SystemDeleteArgs} args - Arguments to delete one System.
   * @example
   * // Delete one System
   * const System = await prisma.system.delete({
   *   where: {
   *     // ... filter to delete one System
   *   }
   * })
   * 
   */
  delete<T extends SystemDeleteArgs>(args: Prisma.SelectSubset<T, SystemDeleteArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one System.
   * @param {SystemUpdateArgs} args - Arguments to update one System.
   * @example
   * // Update one System
   * const system = await prisma.system.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SystemUpdateArgs>(args: Prisma.SelectSubset<T, SystemUpdateArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Systems.
   * @param {SystemDeleteManyArgs} args - Arguments to filter Systems to delete.
   * @example
   * // Delete a few Systems
   * const { count } = await prisma.system.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SystemDeleteManyArgs>(args?: Prisma.SelectSubset<T, SystemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Systems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Systems
   * const system = await prisma.system.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SystemUpdateManyArgs>(args: Prisma.SelectSubset<T, SystemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Systems and returns the data updated in the database.
   * @param {SystemUpdateManyAndReturnArgs} args - Arguments to update many Systems.
   * @example
   * // Update many Systems
   * const system = await prisma.system.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Systems and only return the `id`
   * const systemWithIdOnly = await prisma.system.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SystemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SystemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one System.
   * @param {SystemUpsertArgs} args - Arguments to update or create a System.
   * @example
   * // Update or create a System
   * const system = await prisma.system.upsert({
   *   create: {
   *     // ... data to create a System
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the System we want to update
   *   }
   * })
   */
  upsert<T extends SystemUpsertArgs>(args: Prisma.SelectSubset<T, SystemUpsertArgs<ExtArgs>>): Prisma.Prisma__SystemClient<runtime.Types.Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Systems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemCountArgs} args - Arguments to filter Systems to count.
   * @example
   * // Count the number of Systems
   * const count = await prisma.system.count({
   *   where: {
   *     // ... the filter for the Systems we want to count
   *   }
   * })
  **/
  count<T extends SystemCountArgs>(
    args?: Prisma.Subset<T, SystemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SystemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a System.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SystemAggregateArgs>(args: Prisma.Subset<T, SystemAggregateArgs>): Prisma.PrismaPromise<GetSystemAggregateType<T>>

  /**
   * Group by System.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SystemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SystemGroupByArgs['orderBy'] }
      : { orderBy?: SystemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the System model
 */
readonly fields: SystemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for System.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SystemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the System model
 */
export interface SystemFieldRefs {
  readonly id: Prisma.FieldRef<"System", 'Int'>
  readonly message: Prisma.FieldRef<"System", 'String'>
}
    

// Custom InputTypes
/**
 * System findUnique
 */
export type SystemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * Filter, which System to fetch.
   */
  where: Prisma.SystemWhereUniqueInput
}

/**
 * System findUniqueOrThrow
 */
export type SystemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * Filter, which System to fetch.
   */
  where: Prisma.SystemWhereUniqueInput
}

/**
 * System findFirst
 */
export type SystemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * Filter, which System to fetch.
   */
  where?: Prisma.SystemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Systems to fetch.
   */
  orderBy?: Prisma.SystemOrderByWithRelationInput | Prisma.SystemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Systems.
   */
  cursor?: Prisma.SystemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Systems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Systems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Systems.
   */
  distinct?: Prisma.SystemScalarFieldEnum | Prisma.SystemScalarFieldEnum[]
}

/**
 * System findFirstOrThrow
 */
export type SystemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * Filter, which System to fetch.
   */
  where?: Prisma.SystemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Systems to fetch.
   */
  orderBy?: Prisma.SystemOrderByWithRelationInput | Prisma.SystemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Systems.
   */
  cursor?: Prisma.SystemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Systems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Systems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Systems.
   */
  distinct?: Prisma.SystemScalarFieldEnum | Prisma.SystemScalarFieldEnum[]
}

/**
 * System findMany
 */
export type SystemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * Filter, which Systems to fetch.
   */
  where?: Prisma.SystemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Systems to fetch.
   */
  orderBy?: Prisma.SystemOrderByWithRelationInput | Prisma.SystemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Systems.
   */
  cursor?: Prisma.SystemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Systems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Systems.
   */
  skip?: number
  distinct?: Prisma.SystemScalarFieldEnum | Prisma.SystemScalarFieldEnum[]
}

/**
 * System create
 */
export type SystemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * The data needed to create a System.
   */
  data: Prisma.XOR<Prisma.SystemCreateInput, Prisma.SystemUncheckedCreateInput>
}

/**
 * System createMany
 */
export type SystemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Systems.
   */
  data: Prisma.SystemCreateManyInput | Prisma.SystemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * System createManyAndReturn
 */
export type SystemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * The data used to create many Systems.
   */
  data: Prisma.SystemCreateManyInput | Prisma.SystemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * System update
 */
export type SystemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * The data needed to update a System.
   */
  data: Prisma.XOR<Prisma.SystemUpdateInput, Prisma.SystemUncheckedUpdateInput>
  /**
   * Choose, which System to update.
   */
  where: Prisma.SystemWhereUniqueInput
}

/**
 * System updateMany
 */
export type SystemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Systems.
   */
  data: Prisma.XOR<Prisma.SystemUpdateManyMutationInput, Prisma.SystemUncheckedUpdateManyInput>
  /**
   * Filter which Systems to update
   */
  where?: Prisma.SystemWhereInput
  /**
   * Limit how many Systems to update.
   */
  limit?: number
}

/**
 * System updateManyAndReturn
 */
export type SystemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * The data used to update Systems.
   */
  data: Prisma.XOR<Prisma.SystemUpdateManyMutationInput, Prisma.SystemUncheckedUpdateManyInput>
  /**
   * Filter which Systems to update
   */
  where?: Prisma.SystemWhereInput
  /**
   * Limit how many Systems to update.
   */
  limit?: number
}

/**
 * System upsert
 */
export type SystemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * The filter to search for the System to update in case it exists.
   */
  where: Prisma.SystemWhereUniqueInput
  /**
   * In case the System found by the `where` argument doesn't exist, create a new System with this data.
   */
  create: Prisma.XOR<Prisma.SystemCreateInput, Prisma.SystemUncheckedCreateInput>
  /**
   * In case the System was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SystemUpdateInput, Prisma.SystemUncheckedUpdateInput>
}

/**
 * System delete
 */
export type SystemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
  /**
   * Filter which System to delete.
   */
  where: Prisma.SystemWhereUniqueInput
}

/**
 * System deleteMany
 */
export type SystemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Systems to delete
   */
  where?: Prisma.SystemWhereInput
  /**
   * Limit how many Systems to delete.
   */
  limit?: number
}

/**
 * System without action
 */
export type SystemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the System
   */
  select?: Prisma.SystemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the System
   */
  omit?: Prisma.SystemOmit<ExtArgs> | null
}
