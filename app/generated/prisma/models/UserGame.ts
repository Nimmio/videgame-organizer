
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserGame` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserGame
 * 
 */
export type UserGameModel = runtime.Types.Result.DefaultSelection<Prisma.$UserGamePayload>

export type AggregateUserGame = {
  _count: UserGameCountAggregateOutputType | null
  _avg: UserGameAvgAggregateOutputType | null
  _sum: UserGameSumAggregateOutputType | null
  _min: UserGameMinAggregateOutputType | null
  _max: UserGameMaxAggregateOutputType | null
}

export type UserGameAvgAggregateOutputType = {
  id: number | null
  statusId: number | null
  gameId: number | null
}

export type UserGameSumAggregateOutputType = {
  id: number | null
  statusId: number | null
  gameId: number | null
}

export type UserGameMinAggregateOutputType = {
  id: number | null
  userId: string | null
  statusId: number | null
  gameId: number | null
  notes: string | null
  purchaseDate: Date | null
  preorderDate: Date | null
}

export type UserGameMaxAggregateOutputType = {
  id: number | null
  userId: string | null
  statusId: number | null
  gameId: number | null
  notes: string | null
  purchaseDate: Date | null
  preorderDate: Date | null
}

export type UserGameCountAggregateOutputType = {
  id: number
  userId: number
  statusId: number
  gameId: number
  notes: number
  purchaseDate: number
  preorderDate: number
  _all: number
}


export type UserGameAvgAggregateInputType = {
  id?: true
  statusId?: true
  gameId?: true
}

export type UserGameSumAggregateInputType = {
  id?: true
  statusId?: true
  gameId?: true
}

export type UserGameMinAggregateInputType = {
  id?: true
  userId?: true
  statusId?: true
  gameId?: true
  notes?: true
  purchaseDate?: true
  preorderDate?: true
}

export type UserGameMaxAggregateInputType = {
  id?: true
  userId?: true
  statusId?: true
  gameId?: true
  notes?: true
  purchaseDate?: true
  preorderDate?: true
}

export type UserGameCountAggregateInputType = {
  id?: true
  userId?: true
  statusId?: true
  gameId?: true
  notes?: true
  purchaseDate?: true
  preorderDate?: true
  _all?: true
}

export type UserGameAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserGame to aggregate.
   */
  where?: Prisma.UserGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserGames to fetch.
   */
  orderBy?: Prisma.UserGameOrderByWithRelationInput | Prisma.UserGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserGames
  **/
  _count?: true | UserGameCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserGameAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserGameSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserGameMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserGameMaxAggregateInputType
}

export type GetUserGameAggregateType<T extends UserGameAggregateArgs> = {
      [P in keyof T & keyof AggregateUserGame]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserGame[P]>
    : Prisma.GetScalarType<T[P], AggregateUserGame[P]>
}




export type UserGameGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserGameWhereInput
  orderBy?: Prisma.UserGameOrderByWithAggregationInput | Prisma.UserGameOrderByWithAggregationInput[]
  by: Prisma.UserGameScalarFieldEnum[] | Prisma.UserGameScalarFieldEnum
  having?: Prisma.UserGameScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserGameCountAggregateInputType | true
  _avg?: UserGameAvgAggregateInputType
  _sum?: UserGameSumAggregateInputType
  _min?: UserGameMinAggregateInputType
  _max?: UserGameMaxAggregateInputType
}

export type UserGameGroupByOutputType = {
  id: number
  userId: string
  statusId: number
  gameId: number
  notes: string | null
  purchaseDate: Date | null
  preorderDate: Date | null
  _count: UserGameCountAggregateOutputType | null
  _avg: UserGameAvgAggregateOutputType | null
  _sum: UserGameSumAggregateOutputType | null
  _min: UserGameMinAggregateOutputType | null
  _max: UserGameMaxAggregateOutputType | null
}

type GetUserGameGroupByPayload<T extends UserGameGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGameGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserGameGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserGameGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserGameGroupByOutputType[P]>
      }
    >
  > 



export type UserGameWhereInput = {
  AND?: Prisma.UserGameWhereInput | Prisma.UserGameWhereInput[]
  OR?: Prisma.UserGameWhereInput[]
  NOT?: Prisma.UserGameWhereInput | Prisma.UserGameWhereInput[]
  id?: Prisma.IntFilter<"UserGame"> | number
  userId?: Prisma.StringFilter<"UserGame"> | string
  statusId?: Prisma.IntFilter<"UserGame"> | number
  gameId?: Prisma.IntFilter<"UserGame"> | number
  notes?: Prisma.StringNullableFilter<"UserGame"> | string | null
  purchaseDate?: Prisma.DateTimeNullableFilter<"UserGame"> | Date | string | null
  preorderDate?: Prisma.DateTimeNullableFilter<"UserGame"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  status?: Prisma.XOR<Prisma.StatusScalarRelationFilter, Prisma.StatusWhereInput>
  game?: Prisma.XOR<Prisma.IGDBGameScalarRelationFilter, Prisma.IGDBGameWhereInput>
}

export type UserGameOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  purchaseDate?: Prisma.SortOrderInput | Prisma.SortOrder
  preorderDate?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  status?: Prisma.StatusOrderByWithRelationInput
  game?: Prisma.IGDBGameOrderByWithRelationInput
}

export type UserGameWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.UserGameWhereInput | Prisma.UserGameWhereInput[]
  OR?: Prisma.UserGameWhereInput[]
  NOT?: Prisma.UserGameWhereInput | Prisma.UserGameWhereInput[]
  userId?: Prisma.StringFilter<"UserGame"> | string
  statusId?: Prisma.IntFilter<"UserGame"> | number
  gameId?: Prisma.IntFilter<"UserGame"> | number
  notes?: Prisma.StringNullableFilter<"UserGame"> | string | null
  purchaseDate?: Prisma.DateTimeNullableFilter<"UserGame"> | Date | string | null
  preorderDate?: Prisma.DateTimeNullableFilter<"UserGame"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  status?: Prisma.XOR<Prisma.StatusScalarRelationFilter, Prisma.StatusWhereInput>
  game?: Prisma.XOR<Prisma.IGDBGameScalarRelationFilter, Prisma.IGDBGameWhereInput>
}, "id">

export type UserGameOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  purchaseDate?: Prisma.SortOrderInput | Prisma.SortOrder
  preorderDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.UserGameCountOrderByAggregateInput
  _avg?: Prisma.UserGameAvgOrderByAggregateInput
  _max?: Prisma.UserGameMaxOrderByAggregateInput
  _min?: Prisma.UserGameMinOrderByAggregateInput
  _sum?: Prisma.UserGameSumOrderByAggregateInput
}

export type UserGameScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserGameScalarWhereWithAggregatesInput | Prisma.UserGameScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserGameScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserGameScalarWhereWithAggregatesInput | Prisma.UserGameScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserGame"> | number
  userId?: Prisma.StringWithAggregatesFilter<"UserGame"> | string
  statusId?: Prisma.IntWithAggregatesFilter<"UserGame"> | number
  gameId?: Prisma.IntWithAggregatesFilter<"UserGame"> | number
  notes?: Prisma.StringNullableWithAggregatesFilter<"UserGame"> | string | null
  purchaseDate?: Prisma.DateTimeNullableWithAggregatesFilter<"UserGame"> | Date | string | null
  preorderDate?: Prisma.DateTimeNullableWithAggregatesFilter<"UserGame"> | Date | string | null
}

export type UserGameCreateInput = {
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutGamesInput
  status: Prisma.StatusCreateNestedOneWithoutGamesInput
  game: Prisma.IGDBGameCreateNestedOneWithoutUserGameInput
}

export type UserGameUncheckedCreateInput = {
  id?: number
  userId: string
  statusId: number
  gameId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameUpdateInput = {
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutGamesNestedInput
  status?: Prisma.StatusUpdateOneRequiredWithoutGamesNestedInput
  game?: Prisma.IGDBGameUpdateOneRequiredWithoutUserGameNestedInput
}

export type UserGameUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  statusId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameCreateManyInput = {
  id?: number
  userId: string
  statusId: number
  gameId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameUpdateManyMutationInput = {
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  statusId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameListRelationFilter = {
  every?: Prisma.UserGameWhereInput
  some?: Prisma.UserGameWhereInput
  none?: Prisma.UserGameWhereInput
}

export type UserGameOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserGameCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  purchaseDate?: Prisma.SortOrder
  preorderDate?: Prisma.SortOrder
}

export type UserGameAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type UserGameMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  purchaseDate?: Prisma.SortOrder
  preorderDate?: Prisma.SortOrder
}

export type UserGameMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  purchaseDate?: Prisma.SortOrder
  preorderDate?: Prisma.SortOrder
}

export type UserGameSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  statusId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type UserGameCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutUserInput, Prisma.UserGameUncheckedCreateWithoutUserInput> | Prisma.UserGameCreateWithoutUserInput[] | Prisma.UserGameUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutUserInput | Prisma.UserGameCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserGameCreateManyUserInputEnvelope
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
}

export type UserGameUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutUserInput, Prisma.UserGameUncheckedCreateWithoutUserInput> | Prisma.UserGameCreateWithoutUserInput[] | Prisma.UserGameUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutUserInput | Prisma.UserGameCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserGameCreateManyUserInputEnvelope
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
}

export type UserGameUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutUserInput, Prisma.UserGameUncheckedCreateWithoutUserInput> | Prisma.UserGameCreateWithoutUserInput[] | Prisma.UserGameUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutUserInput | Prisma.UserGameCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserGameUpsertWithWhereUniqueWithoutUserInput | Prisma.UserGameUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserGameCreateManyUserInputEnvelope
  set?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  disconnect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  delete?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  update?: Prisma.UserGameUpdateWithWhereUniqueWithoutUserInput | Prisma.UserGameUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserGameUpdateManyWithWhereWithoutUserInput | Prisma.UserGameUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
}

export type UserGameUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutUserInput, Prisma.UserGameUncheckedCreateWithoutUserInput> | Prisma.UserGameCreateWithoutUserInput[] | Prisma.UserGameUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutUserInput | Prisma.UserGameCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserGameUpsertWithWhereUniqueWithoutUserInput | Prisma.UserGameUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserGameCreateManyUserInputEnvelope
  set?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  disconnect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  delete?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  update?: Prisma.UserGameUpdateWithWhereUniqueWithoutUserInput | Prisma.UserGameUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserGameUpdateManyWithWhereWithoutUserInput | Prisma.UserGameUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
}

export type UserGameCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutGameInput, Prisma.UserGameUncheckedCreateWithoutGameInput> | Prisma.UserGameCreateWithoutGameInput[] | Prisma.UserGameUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutGameInput | Prisma.UserGameCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.UserGameCreateManyGameInputEnvelope
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
}

export type UserGameUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutGameInput, Prisma.UserGameUncheckedCreateWithoutGameInput> | Prisma.UserGameCreateWithoutGameInput[] | Prisma.UserGameUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutGameInput | Prisma.UserGameCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.UserGameCreateManyGameInputEnvelope
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
}

export type UserGameUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutGameInput, Prisma.UserGameUncheckedCreateWithoutGameInput> | Prisma.UserGameCreateWithoutGameInput[] | Prisma.UserGameUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutGameInput | Prisma.UserGameCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.UserGameUpsertWithWhereUniqueWithoutGameInput | Prisma.UserGameUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.UserGameCreateManyGameInputEnvelope
  set?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  disconnect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  delete?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  update?: Prisma.UserGameUpdateWithWhereUniqueWithoutGameInput | Prisma.UserGameUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.UserGameUpdateManyWithWhereWithoutGameInput | Prisma.UserGameUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
}

export type UserGameUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutGameInput, Prisma.UserGameUncheckedCreateWithoutGameInput> | Prisma.UserGameCreateWithoutGameInput[] | Prisma.UserGameUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutGameInput | Prisma.UserGameCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.UserGameUpsertWithWhereUniqueWithoutGameInput | Prisma.UserGameUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.UserGameCreateManyGameInputEnvelope
  set?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  disconnect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  delete?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  update?: Prisma.UserGameUpdateWithWhereUniqueWithoutGameInput | Prisma.UserGameUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.UserGameUpdateManyWithWhereWithoutGameInput | Prisma.UserGameUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
}

export type UserGameCreateNestedManyWithoutStatusInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutStatusInput, Prisma.UserGameUncheckedCreateWithoutStatusInput> | Prisma.UserGameCreateWithoutStatusInput[] | Prisma.UserGameUncheckedCreateWithoutStatusInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutStatusInput | Prisma.UserGameCreateOrConnectWithoutStatusInput[]
  createMany?: Prisma.UserGameCreateManyStatusInputEnvelope
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
}

export type UserGameUncheckedCreateNestedManyWithoutStatusInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutStatusInput, Prisma.UserGameUncheckedCreateWithoutStatusInput> | Prisma.UserGameCreateWithoutStatusInput[] | Prisma.UserGameUncheckedCreateWithoutStatusInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutStatusInput | Prisma.UserGameCreateOrConnectWithoutStatusInput[]
  createMany?: Prisma.UserGameCreateManyStatusInputEnvelope
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
}

export type UserGameUpdateManyWithoutStatusNestedInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutStatusInput, Prisma.UserGameUncheckedCreateWithoutStatusInput> | Prisma.UserGameCreateWithoutStatusInput[] | Prisma.UserGameUncheckedCreateWithoutStatusInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutStatusInput | Prisma.UserGameCreateOrConnectWithoutStatusInput[]
  upsert?: Prisma.UserGameUpsertWithWhereUniqueWithoutStatusInput | Prisma.UserGameUpsertWithWhereUniqueWithoutStatusInput[]
  createMany?: Prisma.UserGameCreateManyStatusInputEnvelope
  set?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  disconnect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  delete?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  update?: Prisma.UserGameUpdateWithWhereUniqueWithoutStatusInput | Prisma.UserGameUpdateWithWhereUniqueWithoutStatusInput[]
  updateMany?: Prisma.UserGameUpdateManyWithWhereWithoutStatusInput | Prisma.UserGameUpdateManyWithWhereWithoutStatusInput[]
  deleteMany?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
}

export type UserGameUncheckedUpdateManyWithoutStatusNestedInput = {
  create?: Prisma.XOR<Prisma.UserGameCreateWithoutStatusInput, Prisma.UserGameUncheckedCreateWithoutStatusInput> | Prisma.UserGameCreateWithoutStatusInput[] | Prisma.UserGameUncheckedCreateWithoutStatusInput[]
  connectOrCreate?: Prisma.UserGameCreateOrConnectWithoutStatusInput | Prisma.UserGameCreateOrConnectWithoutStatusInput[]
  upsert?: Prisma.UserGameUpsertWithWhereUniqueWithoutStatusInput | Prisma.UserGameUpsertWithWhereUniqueWithoutStatusInput[]
  createMany?: Prisma.UserGameCreateManyStatusInputEnvelope
  set?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  disconnect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  delete?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  connect?: Prisma.UserGameWhereUniqueInput | Prisma.UserGameWhereUniqueInput[]
  update?: Prisma.UserGameUpdateWithWhereUniqueWithoutStatusInput | Prisma.UserGameUpdateWithWhereUniqueWithoutStatusInput[]
  updateMany?: Prisma.UserGameUpdateManyWithWhereWithoutStatusInput | Prisma.UserGameUpdateManyWithWhereWithoutStatusInput[]
  deleteMany?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
}

export type UserGameCreateWithoutUserInput = {
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
  status: Prisma.StatusCreateNestedOneWithoutGamesInput
  game: Prisma.IGDBGameCreateNestedOneWithoutUserGameInput
}

export type UserGameUncheckedCreateWithoutUserInput = {
  id?: number
  statusId: number
  gameId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameCreateOrConnectWithoutUserInput = {
  where: Prisma.UserGameWhereUniqueInput
  create: Prisma.XOR<Prisma.UserGameCreateWithoutUserInput, Prisma.UserGameUncheckedCreateWithoutUserInput>
}

export type UserGameCreateManyUserInputEnvelope = {
  data: Prisma.UserGameCreateManyUserInput | Prisma.UserGameCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserGameUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserGameWhereUniqueInput
  update: Prisma.XOR<Prisma.UserGameUpdateWithoutUserInput, Prisma.UserGameUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserGameCreateWithoutUserInput, Prisma.UserGameUncheckedCreateWithoutUserInput>
}

export type UserGameUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserGameWhereUniqueInput
  data: Prisma.XOR<Prisma.UserGameUpdateWithoutUserInput, Prisma.UserGameUncheckedUpdateWithoutUserInput>
}

export type UserGameUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserGameScalarWhereInput
  data: Prisma.XOR<Prisma.UserGameUpdateManyMutationInput, Prisma.UserGameUncheckedUpdateManyWithoutUserInput>
}

export type UserGameScalarWhereInput = {
  AND?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
  OR?: Prisma.UserGameScalarWhereInput[]
  NOT?: Prisma.UserGameScalarWhereInput | Prisma.UserGameScalarWhereInput[]
  id?: Prisma.IntFilter<"UserGame"> | number
  userId?: Prisma.StringFilter<"UserGame"> | string
  statusId?: Prisma.IntFilter<"UserGame"> | number
  gameId?: Prisma.IntFilter<"UserGame"> | number
  notes?: Prisma.StringNullableFilter<"UserGame"> | string | null
  purchaseDate?: Prisma.DateTimeNullableFilter<"UserGame"> | Date | string | null
  preorderDate?: Prisma.DateTimeNullableFilter<"UserGame"> | Date | string | null
}

export type UserGameCreateWithoutGameInput = {
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutGamesInput
  status: Prisma.StatusCreateNestedOneWithoutGamesInput
}

export type UserGameUncheckedCreateWithoutGameInput = {
  id?: number
  userId: string
  statusId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameCreateOrConnectWithoutGameInput = {
  where: Prisma.UserGameWhereUniqueInput
  create: Prisma.XOR<Prisma.UserGameCreateWithoutGameInput, Prisma.UserGameUncheckedCreateWithoutGameInput>
}

export type UserGameCreateManyGameInputEnvelope = {
  data: Prisma.UserGameCreateManyGameInput | Prisma.UserGameCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type UserGameUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.UserGameWhereUniqueInput
  update: Prisma.XOR<Prisma.UserGameUpdateWithoutGameInput, Prisma.UserGameUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.UserGameCreateWithoutGameInput, Prisma.UserGameUncheckedCreateWithoutGameInput>
}

export type UserGameUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.UserGameWhereUniqueInput
  data: Prisma.XOR<Prisma.UserGameUpdateWithoutGameInput, Prisma.UserGameUncheckedUpdateWithoutGameInput>
}

export type UserGameUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.UserGameScalarWhereInput
  data: Prisma.XOR<Prisma.UserGameUpdateManyMutationInput, Prisma.UserGameUncheckedUpdateManyWithoutGameInput>
}

export type UserGameCreateWithoutStatusInput = {
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutGamesInput
  game: Prisma.IGDBGameCreateNestedOneWithoutUserGameInput
}

export type UserGameUncheckedCreateWithoutStatusInput = {
  id?: number
  userId: string
  gameId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameCreateOrConnectWithoutStatusInput = {
  where: Prisma.UserGameWhereUniqueInput
  create: Prisma.XOR<Prisma.UserGameCreateWithoutStatusInput, Prisma.UserGameUncheckedCreateWithoutStatusInput>
}

export type UserGameCreateManyStatusInputEnvelope = {
  data: Prisma.UserGameCreateManyStatusInput | Prisma.UserGameCreateManyStatusInput[]
  skipDuplicates?: boolean
}

export type UserGameUpsertWithWhereUniqueWithoutStatusInput = {
  where: Prisma.UserGameWhereUniqueInput
  update: Prisma.XOR<Prisma.UserGameUpdateWithoutStatusInput, Prisma.UserGameUncheckedUpdateWithoutStatusInput>
  create: Prisma.XOR<Prisma.UserGameCreateWithoutStatusInput, Prisma.UserGameUncheckedCreateWithoutStatusInput>
}

export type UserGameUpdateWithWhereUniqueWithoutStatusInput = {
  where: Prisma.UserGameWhereUniqueInput
  data: Prisma.XOR<Prisma.UserGameUpdateWithoutStatusInput, Prisma.UserGameUncheckedUpdateWithoutStatusInput>
}

export type UserGameUpdateManyWithWhereWithoutStatusInput = {
  where: Prisma.UserGameScalarWhereInput
  data: Prisma.XOR<Prisma.UserGameUpdateManyMutationInput, Prisma.UserGameUncheckedUpdateManyWithoutStatusInput>
}

export type UserGameCreateManyUserInput = {
  id?: number
  statusId: number
  gameId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameUpdateWithoutUserInput = {
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StatusUpdateOneRequiredWithoutGamesNestedInput
  game?: Prisma.IGDBGameUpdateOneRequiredWithoutUserGameNestedInput
}

export type UserGameUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  statusId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  statusId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameCreateManyGameInput = {
  id?: number
  userId: string
  statusId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameUpdateWithoutGameInput = {
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutGamesNestedInput
  status?: Prisma.StatusUpdateOneRequiredWithoutGamesNestedInput
}

export type UserGameUncheckedUpdateWithoutGameInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  statusId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameUncheckedUpdateManyWithoutGameInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  statusId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameCreateManyStatusInput = {
  id?: number
  userId: string
  gameId: number
  notes?: string | null
  purchaseDate?: Date | string | null
  preorderDate?: Date | string | null
}

export type UserGameUpdateWithoutStatusInput = {
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutGamesNestedInput
  game?: Prisma.IGDBGameUpdateOneRequiredWithoutUserGameNestedInput
}

export type UserGameUncheckedUpdateWithoutStatusInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type UserGameUncheckedUpdateManyWithoutStatusInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  purchaseDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  preorderDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type UserGameSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  statusId?: boolean
  gameId?: boolean
  notes?: boolean
  purchaseDate?: boolean
  preorderDate?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  status?: boolean | Prisma.StatusDefaultArgs<ExtArgs>
  game?: boolean | Prisma.IGDBGameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userGame"]>

export type UserGameSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  statusId?: boolean
  gameId?: boolean
  notes?: boolean
  purchaseDate?: boolean
  preorderDate?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  status?: boolean | Prisma.StatusDefaultArgs<ExtArgs>
  game?: boolean | Prisma.IGDBGameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userGame"]>

export type UserGameSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  statusId?: boolean
  gameId?: boolean
  notes?: boolean
  purchaseDate?: boolean
  preorderDate?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  status?: boolean | Prisma.StatusDefaultArgs<ExtArgs>
  game?: boolean | Prisma.IGDBGameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userGame"]>

export type UserGameSelectScalar = {
  id?: boolean
  userId?: boolean
  statusId?: boolean
  gameId?: boolean
  notes?: boolean
  purchaseDate?: boolean
  preorderDate?: boolean
}

export type UserGameOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "statusId" | "gameId" | "notes" | "purchaseDate" | "preorderDate", ExtArgs["result"]["userGame"]>
export type UserGameInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  status?: boolean | Prisma.StatusDefaultArgs<ExtArgs>
  game?: boolean | Prisma.IGDBGameDefaultArgs<ExtArgs>
}
export type UserGameIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  status?: boolean | Prisma.StatusDefaultArgs<ExtArgs>
  game?: boolean | Prisma.IGDBGameDefaultArgs<ExtArgs>
}
export type UserGameIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  status?: boolean | Prisma.StatusDefaultArgs<ExtArgs>
  game?: boolean | Prisma.IGDBGameDefaultArgs<ExtArgs>
}

export type $UserGamePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserGame"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    status: Prisma.$StatusPayload<ExtArgs>
    game: Prisma.$IGDBGamePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: string
    statusId: number
    gameId: number
    notes: string | null
    purchaseDate: Date | null
    preorderDate: Date | null
  }, ExtArgs["result"]["userGame"]>
  composites: {}
}

export type UserGameGetPayload<S extends boolean | null | undefined | UserGameDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserGamePayload, S>

export type UserGameCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserGameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserGameCountAggregateInputType | true
  }

export interface UserGameDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserGame'], meta: { name: 'UserGame' } }
  /**
   * Find zero or one UserGame that matches the filter.
   * @param {UserGameFindUniqueArgs} args - Arguments to find a UserGame
   * @example
   * // Get one UserGame
   * const userGame = await prisma.userGame.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserGameFindUniqueArgs>(args: Prisma.SelectSubset<T, UserGameFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserGame that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserGameFindUniqueOrThrowArgs} args - Arguments to find a UserGame
   * @example
   * // Get one UserGame
   * const userGame = await prisma.userGame.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserGameFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserGameFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserGame that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameFindFirstArgs} args - Arguments to find a UserGame
   * @example
   * // Get one UserGame
   * const userGame = await prisma.userGame.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserGameFindFirstArgs>(args?: Prisma.SelectSubset<T, UserGameFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserGame that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameFindFirstOrThrowArgs} args - Arguments to find a UserGame
   * @example
   * // Get one UserGame
   * const userGame = await prisma.userGame.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserGameFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserGameFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserGames that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserGames
   * const userGames = await prisma.userGame.findMany()
   * 
   * // Get first 10 UserGames
   * const userGames = await prisma.userGame.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userGameWithIdOnly = await prisma.userGame.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserGameFindManyArgs>(args?: Prisma.SelectSubset<T, UserGameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserGame.
   * @param {UserGameCreateArgs} args - Arguments to create a UserGame.
   * @example
   * // Create one UserGame
   * const UserGame = await prisma.userGame.create({
   *   data: {
   *     // ... data to create a UserGame
   *   }
   * })
   * 
   */
  create<T extends UserGameCreateArgs>(args: Prisma.SelectSubset<T, UserGameCreateArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserGames.
   * @param {UserGameCreateManyArgs} args - Arguments to create many UserGames.
   * @example
   * // Create many UserGames
   * const userGame = await prisma.userGame.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserGameCreateManyArgs>(args?: Prisma.SelectSubset<T, UserGameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserGames and returns the data saved in the database.
   * @param {UserGameCreateManyAndReturnArgs} args - Arguments to create many UserGames.
   * @example
   * // Create many UserGames
   * const userGame = await prisma.userGame.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserGames and only return the `id`
   * const userGameWithIdOnly = await prisma.userGame.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserGameCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserGameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserGame.
   * @param {UserGameDeleteArgs} args - Arguments to delete one UserGame.
   * @example
   * // Delete one UserGame
   * const UserGame = await prisma.userGame.delete({
   *   where: {
   *     // ... filter to delete one UserGame
   *   }
   * })
   * 
   */
  delete<T extends UserGameDeleteArgs>(args: Prisma.SelectSubset<T, UserGameDeleteArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserGame.
   * @param {UserGameUpdateArgs} args - Arguments to update one UserGame.
   * @example
   * // Update one UserGame
   * const userGame = await prisma.userGame.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserGameUpdateArgs>(args: Prisma.SelectSubset<T, UserGameUpdateArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserGames.
   * @param {UserGameDeleteManyArgs} args - Arguments to filter UserGames to delete.
   * @example
   * // Delete a few UserGames
   * const { count } = await prisma.userGame.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserGameDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserGameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserGames
   * const userGame = await prisma.userGame.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserGameUpdateManyArgs>(args: Prisma.SelectSubset<T, UserGameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserGames and returns the data updated in the database.
   * @param {UserGameUpdateManyAndReturnArgs} args - Arguments to update many UserGames.
   * @example
   * // Update many UserGames
   * const userGame = await prisma.userGame.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserGames and only return the `id`
   * const userGameWithIdOnly = await prisma.userGame.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserGameUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserGameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserGame.
   * @param {UserGameUpsertArgs} args - Arguments to update or create a UserGame.
   * @example
   * // Update or create a UserGame
   * const userGame = await prisma.userGame.upsert({
   *   create: {
   *     // ... data to create a UserGame
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserGame we want to update
   *   }
   * })
   */
  upsert<T extends UserGameUpsertArgs>(args: Prisma.SelectSubset<T, UserGameUpsertArgs<ExtArgs>>): Prisma.Prisma__UserGameClient<runtime.Types.Result.GetResult<Prisma.$UserGamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameCountArgs} args - Arguments to filter UserGames to count.
   * @example
   * // Count the number of UserGames
   * const count = await prisma.userGame.count({
   *   where: {
   *     // ... the filter for the UserGames we want to count
   *   }
   * })
  **/
  count<T extends UserGameCountArgs>(
    args?: Prisma.Subset<T, UserGameCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserGameCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserGame.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserGameAggregateArgs>(args: Prisma.Subset<T, UserGameAggregateArgs>): Prisma.PrismaPromise<GetUserGameAggregateType<T>>

  /**
   * Group by UserGame.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGameGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserGameGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserGameGroupByArgs['orderBy'] }
      : { orderBy?: UserGameGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserGame model
 */
readonly fields: UserGameFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserGame.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserGameClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  status<T extends Prisma.StatusDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StatusDefaultArgs<ExtArgs>>): Prisma.Prisma__StatusClient<runtime.Types.Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  game<T extends Prisma.IGDBGameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IGDBGameDefaultArgs<ExtArgs>>): Prisma.Prisma__IGDBGameClient<runtime.Types.Result.GetResult<Prisma.$IGDBGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserGame model
 */
export interface UserGameFieldRefs {
  readonly id: Prisma.FieldRef<"UserGame", 'Int'>
  readonly userId: Prisma.FieldRef<"UserGame", 'String'>
  readonly statusId: Prisma.FieldRef<"UserGame", 'Int'>
  readonly gameId: Prisma.FieldRef<"UserGame", 'Int'>
  readonly notes: Prisma.FieldRef<"UserGame", 'String'>
  readonly purchaseDate: Prisma.FieldRef<"UserGame", 'DateTime'>
  readonly preorderDate: Prisma.FieldRef<"UserGame", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserGame findUnique
 */
export type UserGameFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * Filter, which UserGame to fetch.
   */
  where: Prisma.UserGameWhereUniqueInput
}

/**
 * UserGame findUniqueOrThrow
 */
export type UserGameFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * Filter, which UserGame to fetch.
   */
  where: Prisma.UserGameWhereUniqueInput
}

/**
 * UserGame findFirst
 */
export type UserGameFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * Filter, which UserGame to fetch.
   */
  where?: Prisma.UserGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserGames to fetch.
   */
  orderBy?: Prisma.UserGameOrderByWithRelationInput | Prisma.UserGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserGames.
   */
  cursor?: Prisma.UserGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserGames.
   */
  distinct?: Prisma.UserGameScalarFieldEnum | Prisma.UserGameScalarFieldEnum[]
}

/**
 * UserGame findFirstOrThrow
 */
export type UserGameFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * Filter, which UserGame to fetch.
   */
  where?: Prisma.UserGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserGames to fetch.
   */
  orderBy?: Prisma.UserGameOrderByWithRelationInput | Prisma.UserGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserGames.
   */
  cursor?: Prisma.UserGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserGames.
   */
  distinct?: Prisma.UserGameScalarFieldEnum | Prisma.UserGameScalarFieldEnum[]
}

/**
 * UserGame findMany
 */
export type UserGameFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * Filter, which UserGames to fetch.
   */
  where?: Prisma.UserGameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserGames to fetch.
   */
  orderBy?: Prisma.UserGameOrderByWithRelationInput | Prisma.UserGameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserGames.
   */
  cursor?: Prisma.UserGameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserGames.
   */
  skip?: number
  distinct?: Prisma.UserGameScalarFieldEnum | Prisma.UserGameScalarFieldEnum[]
}

/**
 * UserGame create
 */
export type UserGameCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * The data needed to create a UserGame.
   */
  data: Prisma.XOR<Prisma.UserGameCreateInput, Prisma.UserGameUncheckedCreateInput>
}

/**
 * UserGame createMany
 */
export type UserGameCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserGames.
   */
  data: Prisma.UserGameCreateManyInput | Prisma.UserGameCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserGame createManyAndReturn
 */
export type UserGameCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * The data used to create many UserGames.
   */
  data: Prisma.UserGameCreateManyInput | Prisma.UserGameCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserGame update
 */
export type UserGameUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * The data needed to update a UserGame.
   */
  data: Prisma.XOR<Prisma.UserGameUpdateInput, Prisma.UserGameUncheckedUpdateInput>
  /**
   * Choose, which UserGame to update.
   */
  where: Prisma.UserGameWhereUniqueInput
}

/**
 * UserGame updateMany
 */
export type UserGameUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserGames.
   */
  data: Prisma.XOR<Prisma.UserGameUpdateManyMutationInput, Prisma.UserGameUncheckedUpdateManyInput>
  /**
   * Filter which UserGames to update
   */
  where?: Prisma.UserGameWhereInput
  /**
   * Limit how many UserGames to update.
   */
  limit?: number
}

/**
 * UserGame updateManyAndReturn
 */
export type UserGameUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * The data used to update UserGames.
   */
  data: Prisma.XOR<Prisma.UserGameUpdateManyMutationInput, Prisma.UserGameUncheckedUpdateManyInput>
  /**
   * Filter which UserGames to update
   */
  where?: Prisma.UserGameWhereInput
  /**
   * Limit how many UserGames to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserGame upsert
 */
export type UserGameUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * The filter to search for the UserGame to update in case it exists.
   */
  where: Prisma.UserGameWhereUniqueInput
  /**
   * In case the UserGame found by the `where` argument doesn't exist, create a new UserGame with this data.
   */
  create: Prisma.XOR<Prisma.UserGameCreateInput, Prisma.UserGameUncheckedCreateInput>
  /**
   * In case the UserGame was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserGameUpdateInput, Prisma.UserGameUncheckedUpdateInput>
}

/**
 * UserGame delete
 */
export type UserGameDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
  /**
   * Filter which UserGame to delete.
   */
  where: Prisma.UserGameWhereUniqueInput
}

/**
 * UserGame deleteMany
 */
export type UserGameDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserGames to delete
   */
  where?: Prisma.UserGameWhereInput
  /**
   * Limit how many UserGames to delete.
   */
  limit?: number
}

/**
 * UserGame without action
 */
export type UserGameDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserGame
   */
  select?: Prisma.UserGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGame
   */
  omit?: Prisma.UserGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGameInclude<ExtArgs> | null
}
